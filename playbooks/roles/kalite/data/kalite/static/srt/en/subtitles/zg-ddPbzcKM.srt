1
00:00:00,933 --> 00:00:02,948
What I want to do in this video

2
00:00:02,948 --> 00:00:05,133
is make sure we really understand what is going on

3
00:00:05,133 --> 00:00:08,067
when we call our recursive fibonacci functions

4
00:00:08,067 --> 00:00:10,800
So I'm going to assume that someone calls it with

5
00:00:10,850 --> 00:00:16,138
an argument of and they give pass 5 as an argument

6
00:00:16,200 --> 00:00:18,733
I don't want to pick too large of a number

7
00:00:18,733 --> 00:00:21,267
cuz otherwise I'll be explaining it forever

8
00:00:21,267 --> 00:00:23,200
So let's try fibonacci(5)

9
00:00:23,200 --> 00:00:27,067
So in this situation, within the context of this function

10
00:00:27,067 --> 00:00:32,467
the parameter n right here is going to be equal to 5

11
00:00:32,467 --> 00:00:37,400
so in that first pass, the parameter n is going to be equal to 5

12
00:00:37,400 --> 00:00:39,313
The way we wrote it

13
00:00:39,313 --> 00:00:41,129
we said that if n < 2 return n

14
00:00:41,129 --> 00:00:42,867
5 is definitely not less than 2

15
00:00:42,867 --> 00:00:46,133
so we're going to go to the else part of the if clause

16
00:00:46,133 --> 00:00:49,138
or the else clause and say return

17
00:00:49,138 --> 00:00:53,100
fibonacci of (n-1) plus fibonnaci of (n-2))

18
00:00:53,100 --> 00:00:55,800
so when I call this it's eventually be reduced to

19
00:00:55,800 --> 00:00:58,656
if you want to think about it that way, or simplified

20
00:00:58,656 --> 00:01:07,005
it would return, what is going to be the same thing as fibonacci of

21
00:01:07,005 --> 00:01:09,585
remember n was 5

22
00:01:09,600 --> 00:01:14,488
so n-1 is 4

23
00:01:14,611 --> 00:01:20,395
plus fibonacci of n-2, which when we ran the function n was 5

24
00:01:20,395 --> 00:01:22,108
so 5-2 is 3

25
00:01:22,246 --> 00:01:24,595
well these are just more function calls

26
00:01:24,595 --> 00:01:26,729
so now we are going to go again

27
00:01:26,729 --> 00:01:28,718
n is not 5, but 4 and 3

28
00:01:28,718 --> 00:01:30,600
so let's try this out

29
00:01:30,600 --> 00:01:34,467
so over here n is equal to 4

30
00:01:34,467 --> 00:01:38,200
n is equal to 4

31
00:01:38,200 --> 00:01:40,600
so once again 4 is not less than 2,

32
00:01:40,600 --> 00:01:42,867
so we don't do this part

33
00:01:42,867 --> 00:01:44,552
we go to the else

34
00:01:44,552 --> 00:01:47,467
we then return fibbonacci(4-1) which is 3

35
00:01:47,467 --> 00:01:49,933
so this is going to simplify to,

36
00:01:49,933 --> 00:01:53,610
or breakdown I should say

37
00:01:53,610 --> 00:01:56,595
to fibonnacci of 4-1 which is 3

38
00:01:56,641 --> 00:02:03,982
plus fibbonacci of 4-2

39
00:02:04,120 --> 00:02:04,620
which is fibonaacci of 2

40
00:02:04,620 --> 00:02:09,467
so this right over here will essenitally return this

41
00:02:09,467 --> 00:02:14,467
and this over here on the right fibonacci of 3

42
00:02:14,467 --> 00:02:17,641
let me draw, because these are going to get jumbled up soon

43
00:02:17,641 --> 00:02:22,169
so this returns this stuff in magenta

44
00:02:22,169 --> 00:02:26,400
and this stuff I've underlined in green will return

45
00:02:26,400 --> 00:02:29,359
n is now 3; 3 is not less than 2

46
00:02:29,359 --> 00:02:32,346
so you go here

47
00:02:32,346 --> 00:02:42,133
and it will return fibonacci of 3-1 which is fibbonacci (2)

48
00:02:42,133 --> 00:02:51,467
and plus fibonacci of 3-2, which is fibonacci (1)

49
00:02:51,467 --> 00:02:53,523
and then we're going to go over here

50
00:02:53,523 --> 00:02:56,021
and we're going to have to calculate each of these things

51
00:02:56,021 --> 00:02:59,133
and these are just more calls to fibonacci

52
00:02:59,133 --> 00:03:02,667
and fibonacci(3), so you can see how this is getting pretty involved right now

53
00:03:02,667 --> 00:03:04,933
I'm going to start writing fib short for fibonacci

54
00:03:04,933 --> 00:03:07,800
so that I don't run out of real estate

55
00:03:07,800 --> 00:03:11,231
fibonacci (3) when you call it

56
00:03:11,231 --> 00:03:13,720
n 3 is not less than 2

57
00:03:13,720 --> 00:03:18,933
that reduces to fibonacci (3-1)

58
00:03:18,933 --> 00:03:21,267
I'll just write fib. short for fibonacci

59
00:03:21,267 --> 00:03:26,262
fibonacci of 2 plus fibbonacci of (3-2)

60
00:03:26,262 --> 00:03:29,282
plus fibonacci of 1

61
00:03:29,298 --> 00:03:32,662
so it reduces to that or breaks down to that

62
00:03:32,662 --> 00:03:35,933
and over here fibonacci of 2

63
00:03:35,933 --> 00:03:38,452
2 is not less than 2,

64
00:03:38,452 --> 00:03:42,434
so we are going to have to return fibonacci of 2 -1

65
00:03:42,434 --> 00:03:43,600
fibonacci of 1 plus fibonacci of 2-2

66
00:03:43,600 --> 00:03:49,933
so plus fibonacci of 0

67
00:03:49,933 --> 00:03:53,800
so it breaks down to those two calls to fibonacci

68
00:03:53,800 --> 00:03:55,933
and over here fibonacci(2) same thing.

69
00:03:56,025 --> 00:03:58,144
we made a call to fibonacci(2)

70
00:03:58,144 --> 00:04:01,080
that's going to break down just like that fibonacci(2) did

71
00:04:01,080 --> 00:04:03,323
it will break down to a call

72
00:04:03,323 --> 00:04:08,182
to of fibbonacci of 1 and fibonacci(0)

73
00:04:08,182 --> 00:04:09,686
and then we have fibonacci of 1

74
00:04:09,978 --> 00:04:11,374
so this is interesting.

75
00:04:11,374 --> 00:04:13,138
Because when n is equal to 1

76
00:04:13,138 --> 00:04:16,336
this clause up here suddenly becomes relevant

77
00:04:16,336 --> 00:04:20,025
Because n is less than 2 and it says return n

78
00:04:20,025 --> 00:04:22,800
so this, this right here is going to simplify

79
00:04:22,800 --> 00:04:25,920
this term right over here is going to simplify to 1

80
00:04:26,105 --> 00:04:28,569
it is going to evaluate to 1

81
00:04:28,569 --> 00:04:30,713
And then we look at all of these over here

82
00:04:30,713 --> 00:04:36,841
fibonacci (2); we know that fibonacci(2) results in fib(1) + fib(0)

83
00:04:36,841 --> 00:04:39,308
so let me write that over here

84
00:04:39,308 --> 00:04:44,052
so over here is fibbonacci(1) plus fibbonacci(0)

85
00:04:44,052 --> 00:04:46,302
fibb is short for fibonacci

86
00:04:46,302 --> 00:04:49,600
and then we know fibbonacci of 1

87
00:04:49,600 --> 00:04:52,133
1 is less than 2, so return n

88
00:04:52,133 --> 00:04:56,533
so this is going to return 1

89
00:04:56,533 --> 00:04:58,933
fibonacci of 1 just returns 1

90
00:04:58,933 --> 00:05:00,533
fibonacci of 0

91
00:05:00,533 --> 00:05:02,133
and 0 is less than 2, returns 0

92
00:05:02,133 --> 00:05:03,633
so fibonacci(0) just returns 0

93
00:05:03,633 --> 00:05:05,133
fibonacci of 0 returns 0

94
00:05:05,133 --> 00:05:07,800
fibonacci of 1 returns 1

95
00:05:07,800 --> 00:05:09,821
fibonacci of 0 returns 0

96
00:05:09,821 --> 00:05:12,733
and then fibonacci of 1 returns 1

97
00:05:12,733 --> 00:05:14,033
fibonacci of 0 returns 0

98
00:05:14,395 --> 00:05:20,800
So the whole time the interpreter is processing this recursive function call

99
00:05:20,800 --> 00:05:23,933
it kinda has to remember all of the previous, how it got there

100
00:05:23,933 --> 00:05:27,492
because once it eventually gets down to the base cases,

101
00:05:27,492 --> 00:05:30,733
once it gets down to the n = 1 or 0

102
00:05:30,733 --> 00:05:31,833
it actually gets a numeric response

103
00:05:31,833 --> 00:05:32,933
it then has to build up to it's previous reponse

104
00:05:32,933 --> 00:05:35,148
so fibbonacci(2) right over here

105
00:05:35,148 --> 00:05:39,148
is 1 + 0

106
00:05:39,148 --> 00:05:42,687
fibbonacci of(2) is going to simplify to 1

107
00:05:42,687 --> 00:05:47,000
This fibonacci(3) is fibonacci(2) + fibbonacci(1)

108
00:05:47,000 --> 00:05:48,129
those get simplified to 1

109
00:05:48,205 --> 00:05:52,095
so this is going to be 1 + 1

110
00:05:52,095 --> 00:05:53,363
so this is going to be 2

111
00:05:53,363 --> 00:05:54,415
We go over here fibbonacci of(2)

112
00:05:54,415 --> 00:05:58,744
fibbonacci(1) + fibbonacci(0) = 1

113
00:05:58,744 --> 00:06:00,118
fibbonacci(2)

114
00:06:00,118 --> 00:06:03,175
1+0 is 1

115
00:06:03,175 --> 00:06:05,252
We go over to fibonacci of 1, this is 1

116
00:06:05,252 --> 00:06:06,138
And now we go up to this level

117
00:06:06,138 --> 00:06:10,000
we're kind of retructuring back until we get back to the original function call

118
00:06:10,000 --> 00:06:12,133
And I'm not going to go ito the details

119
00:06:12,133 --> 00:06:13,636
about how the interpreter is actually doing that

120
00:06:13,636 --> 00:06:15,800
because this is acutally a fascinating discussion

121
00:06:15,800 --> 00:06:17,933
but I'll just think about how we think about what is happening

122
00:06:17,933 --> 00:06:20,267
during in thisrecursive function call, and why, why is is working

123
00:06:20,267 --> 00:06:23,733
why is it gving us the right answer

124
00:06:23,733 --> 00:06:25,400
And then we go over here fibonacci(4)

125
00:06:25,400 --> 00:06:29,052
well fibonacci(4), the fourth fibonacci term

126
00:06:29,144 --> 00:06:31,759
is the sum of the third and the second fibonacci term

127
00:06:31,759 --> 00:06:33,733
which we have already figured out

128
00:06:33,733 --> 00:06:37,738
they are two and one, you just take their sum and get 3

129
00:06:37,738 --> 00:06:41,200
the third fibonacci term, by the definition of the fibonacci sequence

130
00:06:41,200 --> 00:06:44,067
is the sum of the first and the second term

131
00:06:44,067 --> 00:06:46,636
those are each one

132
00:06:46,636 --> 00:06:49,175
the sum of one plus one is two

133
00:06:49,175 --> 00:06:51,882
the fifth term, the fifth fibonacci number

134
00:06:51,913 --> 00:06:54,013
the fifth fibonacci term

135
00:06:54,013 --> 00:06:56,867
is the sum of the fourth and the third terms

136
00:06:56,867 --> 00:06:58,887
those are three and two

137
00:06:58,887 --> 00:07:01,338
so three plus two is five

138
00:07:01,338 --> 00:07:05,067
so this things right over here is going to evaluate to 5

139
00:07:05,067 --> 00:07:07,133
So hopefully that clarifies a little bit

140
00:07:07,133 --> 00:07:09,600
about how this recusive program is actually working

141
00:07:09,600 --> 00:07:11,308
what's neat about it is

142
00:07:11,308 --> 00:07:13,467
that it wouldn't work if you didn't go down and define

143
00:07:13,467 --> 00:07:15,800
the base cases of fibonacci(1) and fibonacci(0)

144
00:07:15,800 --> 00:07:17,733
It would just keep calling itself forever, and never get anywhere

145
00:07:17,733 --> 00:07:21,400
and what they key with recursion is that it can call itself

146
00:07:21,400 --> 00:07:25,133
as long as every time it calls itself

147
00:07:25,133 --> 00:07:27,600
it's making its way down to the base cases

148
00:07:27,600 --> 00:07:29,400
so at some point

149
00:07:29,400 --> 00:07:31,267
if it keeps calling itself, it keeps calling itself

150
00:07:31,267 --> 00:07:35,846
eventually it's able to build back those calls

151
00:07:35,846 --> 00:07:37,452
to get back to the base cases

152
00:07:37,452 --> 00:07:40,467
and then recontruct what the original value was from that

153
00:07:40,467 --> 00:07:42,467
and that's why its working

154
00:07:42,467 --> 00:07:45,200
each call to fibonacci is a simpler version

155
00:07:45,200 --> 00:07:46,533
I have a lower n

156
00:07:46,533 --> 00:07:48,333
and eventually my n are going to get to the base cases

157
00:07:48,333 --> 00:07:55,733
which will actually give me actual values

158
00:07:55,733 --> 00:07:57,600
which I can then recontruct for our original calls

159
00:07:57,600 --> 00:07:59,000
hopefully that helps a little bit

160
00:07:59,000 --> 00:07:59,500
recursion can be confusing

161
00:07:59,500 --> 00:08:00,000
but at the same time

162
00:08:00,082 --> 99:59:59,999
it can also be elegant and beautiful in it's own way
