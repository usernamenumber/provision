1
00:00:01,310 --> 00:00:02,528
I have an update.

2
00:00:02,528 --> 00:00:04,207
NASA has said but there will be

3
00:00:04,207 --> 00:00:05,919
a hardware random number generator

4
00:00:05,919 --> 00:00:08,878
on the Rover that we have access to.

5
00:00:08,878 --> 00:00:10,692
And after that, they made one more comment.

6
00:00:10,692 --> 00:00:12,910
They reminded me that we just need

7
00:00:12,910 --> 00:00:16,085
our algorithm to work in practice.

8
00:00:16,085 --> 00:00:18,616
For something to work in practice,

9
00:00:18,616 --> 00:00:22,560
it means that there's always some possibility of error,

10
00:00:22,560 --> 00:00:24,930
but perhaps the possibility is so small

11
00:00:24,930 --> 00:00:27,673
that we ignore it in practice.

12
00:00:27,673 --> 00:00:28,942
And if this sounds crazy ,

13
00:00:28,942 --> 00:00:30,966
just realize that – in the physical world –

14
00:00:30,966 --> 00:00:32,393
nothing is ever certain.

15
00:00:32,393 --> 00:00:35,203
There are always chances for error.

16
00:00:35,203 --> 00:00:37,533
For example, chip packaging contains

17
00:00:37,533 --> 00:00:41,208
small amounts of radioactive contaminants.

18
00:00:41,208 --> 00:00:42,740
And when these decay,

19
00:00:42,740 --> 00:00:44,978
they release alpha particles --

20
00:00:44,978 --> 00:00:48,394
which can actually flip bits in memory --

21
00:00:48,394 --> 00:00:50,980
and perhaps change a number unexpectedly.

22
00:00:50,980 --> 00:00:52,178
And even more interesting,

23
00:00:52,178 --> 00:00:56,614
cosmic rays can also cause soft errors.

24
00:00:56,614 --> 00:01:00,661
We can never remove the chance of error completely.

25
00:01:00,661 --> 00:01:02,365
And I asked NASA exactly --

26
00:01:02,365 --> 00:01:06,008
"Well what error probability is acceptable?"

27
00:01:06,008 --> 00:01:07,550
And they said [that] we just need to make sure

28
00:01:07,550 --> 00:01:11,393
that the probability of error for a given trial

29
00:01:11,393 --> 00:01:13,418
is less than they odds of

30
00:01:13,418 --> 00:01:15,991
hitting the lottery twice in a row.

31
00:01:15,991 --> 00:01:17,630
And the odds of hitting the lottery --

32
00:01:17,630 --> 00:01:20,069
say 649 -- twice in a row

33
00:01:20,069 --> 00:01:22,622
is 6 x 10 to -14.

34
00:01:22,622 --> 00:01:24,694
So let's just be safe and round down,

35
00:01:24,694 --> 00:01:28,625
and say our error probability is 10 to -15.

36
00:01:28,625 --> 00:01:29,688
Safe enough.

37
00:01:29,688 --> 00:01:32,305
We will not expect to see an error.

38
00:01:32,305 --> 00:01:34,980
And it could run hundreds or thousands of times.

39
00:01:34,980 --> 00:01:38,190
Now my question is, "Would access to randomness

40
00:01:38,190 --> 00:01:41,309
help us speed-up a decision algorithm --

41
00:01:41,309 --> 00:01:43,820
such as this primality test?"

42
00:01:43,820 --> 00:01:45,075
And this is a deep question.

43
00:01:45,075 --> 00:01:48,282
So let's step back and look at the big picture.

44
00:01:48,282 --> 00:01:50,407
Given some collection of integers

45
00:01:50,407 --> 00:01:53,485
from 1 to some limit, 'n,' say –

46
00:01:53,485 --> 00:01:56,600
(Let's think of it as our 'universe' of integers.)

47
00:01:56,600 --> 00:02:00,948
We can always divide a collection into two sets.

48
00:02:00,948 --> 00:02:05,113
And a decision problem can actually be thought of

49
00:02:05,113 --> 00:02:07,826
as a partition[ing] into two sets.

50
00:02:07,826 --> 00:02:08,931
For example:

51
00:02:08,931 --> 00:02:12,180
"Provided some n, is n less than a hundred?"

52
00:02:12,180 --> 00:02:16,167
it would output 'yes' for all integers less than a hundred -

53
00:02:16,167 --> 00:02:18,486
– so, here is one collection –

54
00:02:18,486 --> 00:02:22,435
and 'no' for all others – which is another collection.

55
00:02:22,435 --> 00:02:23,052
Okay.

56
00:02:23,052 --> 00:02:28,120
So let's now focus on recognizing primes with a decision.

57
00:02:28,120 --> 00:02:29,843
And ideally what we woud like is some

58
00:02:29,843 --> 00:02:34,962
simply computed criteria that all primes satisfy,

59
00:02:34,962 --> 00:02:39,975
and no composites satisfy.

60
00:02:39,975 --> 00:02:42,429
Now if we knew some simple pattern which

61
00:02:42,429 --> 00:02:44,957
describes the location of all primes –

62
00:02:44,957 --> 00:02:46,709
and only primes –

63
00:02:46,709 --> 00:02:47,719
then given some number n,

64
00:02:47,719 --> 00:02:50,706
we could simply check if n follows that pattern.

65
00:02:50,706 --> 00:02:54,132
But the problem is that – so far – no exhaustive

66
00:02:54,132 --> 00:02:57,566
and simply computed pattern has been found

67
00:02:57,566 --> 00:03:00,769
for all primes, and no composites –

68
00:03:00,769 --> 00:03:04,553
or all composites and no primes.

69
00:03:08,289 --> 00:03:15,692
But we do know fast tests for most composite numbers.

70
00:03:15,692 --> 00:03:20,055
So, for example, a simply computed criterion

71
00:03:20,055 --> 00:03:23,560
would be a test for 'evenness.'

72
00:03:23,560 --> 00:03:27,615
And all even numbers are divisible by 2.

73
00:03:27,615 --> 00:03:29,850
It's fast, because we can tell if something's even

74
00:03:29,850 --> 00:03:32,245
by just looking at the last digit.

75
00:03:32,245 --> 00:03:35,103
And even as n grows, the problem doesn't get any harder.

76
00:03:35,103 --> 00:03:37,033
We just look at that last digit --

77
00:03:37,033 --> 00:03:39,868
also known as the 'low-order bit.'

78
00:03:39,868 --> 00:03:44,065
Now realize that we can use this 'evenmess' test

79
00:03:44,065 --> 00:03:48,538
as a low quality composite test --

80
00:03:48,538 --> 00:03:52,924
in that we could have some algorithm accept an integer n –

81
00:03:52,924 --> 00:03:55,900
and all our algorithm does is check if n is even.

82
00:03:55,900 --> 00:03:59,319
If n is even – and greater than 2–

83
00:03:59,319 --> 00:04:03,756
then we know with 100% certainty it is composite --

84
00:04:03,756 --> 00:04:05,815
because we have proof.

85
00:04:05,815 --> 00:04:08,973
Think of 2 as our 'composite witness.'

86
00:04:08,973 --> 00:04:10,485
However, if [it is] not [divisible by 2],

87
00:04:10,485 --> 00:04:12,378
then we aren't exactly sure.

88
00:04:12,378 --> 00:04:16,286
If it's odd, it could be prime – since all primes are odd.

89
00:04:16,286 --> 00:04:17,754
Or it could be one of the many

90
00:04:17,754 --> 00:04:21,397
composites which are odd – such as 9 or 15.

91
00:04:21,397 --> 00:04:24,767
And this massive region of odd composites

92
00:04:24,767 --> 00:04:26,876
makes for an unacceptable test.

93
00:04:26,876 --> 00:04:28,960
Now to be clear, let's draw this.

94
00:04:28,960 --> 00:04:29,923
Provided some n, –

95
00:04:29,923 --> 00:04:32,996
[where] n can be either prime or composite –

96
00:04:32,996 --> 00:04:35,716
If n is prime, our algorithm will say

97
00:04:35,716 --> 00:04:37,851
'prime' 100% of the time –

98
00:04:37,851 --> 00:04:40,555
since no primes are even – that are greater than 2.

99
00:04:40,555 --> 00:04:42,681
And it will never say 'composite'

100
00:04:42,681 --> 00:04:44,384
when a prime is provided.

101
00:04:44,384 --> 00:04:45,997
However, if n is composite,

102
00:04:45,997 --> 00:04:48,659
our algorithm will say n is composite

103
00:04:48,659 --> 00:04:50,408
about 50% of the time,

104
00:04:50,408 --> 00:04:52,850
and prime [about] 50% of the time.

105
00:04:52,850 --> 00:04:55,559
So this means that if our algorithm outputs 'composite,'

106
00:04:55,559 --> 00:04:59,166
it means it found proof – a 'composite witness.'

107
00:05:02,483 --> 00:05:05,959
However, if our algorithm outputs 'prime,'

108
00:05:05,959 --> 00:05:11,828
we know there is an unacceptably large chance of error.

109
00:05:11,828 --> 00:05:15,062
Up until now, our strategy has dealt with this

110
00:05:15,062 --> 00:05:19,498
large – unacceptably large error by iteration.

111
00:05:19,498 --> 00:05:22,197
And let's draw the flow of our machine.

112
00:05:22,197 --> 00:05:23,602
Given some n,

113
00:05:23,602 --> 00:05:28,369
our machine does a series of divisibility tests –

114
00:05:28,369 --> 00:05:30,853
starting at a = 2.

115
00:05:30,853 --> 00:05:33,414
It asks, "Does a divide n?"

116
00:05:33,414 --> 00:05:35,770
and if a doesn't divide n,

117
00:05:35,770 --> 00:05:39,202
then we can eliminate all of this region.

118
00:05:39,202 --> 00:05:40,570
Then [the next question it asks is],

119
00:05:40,570 --> 00:05:41,952
"Does n divide 3?"

120
00:05:41,952 --> 00:05:45,395
And if not, then we eliminate that whole section.

121
00:05:45,395 --> 00:05:49,576
And then, "Does n divide five? – seven? – and so on.

122
00:05:49,576 --> 00:05:51,460
And notice, these are disjoint sets,

123
00:05:51,460 --> 00:05:55,341
which gradually fill up all possible composites.

124
00:05:55,341 --> 00:05:57,846
Now if we ever answer 'yes' along the way,

125
00:05:57,846 --> 00:06:01,167
then we have proof that n is composite –

126
00:06:01,167 --> 00:06:04,620
and a – whatever it is at that point – is our witness.

127
00:06:04,620 --> 00:06:07,782
So we halt and output 'composite' from our algorithm.

128
00:06:07,782 --> 00:06:09,718
Otherwise, we continue trying

129
00:06:09,718 --> 00:06:12,545
until we exhaust all possible composites,

130
00:06:12,545 --> 00:06:14,711
until we hit the square root of n –

131
00:06:14,711 --> 00:06:17,471
since we know, remember, every composite number, n,

132
00:06:17,471 --> 00:06:22,260
must have a factor less than or equal to

133
00:06:22,260 --> 00:06:23,910
the square root of n.

134
00:06:23,910 --> 00:06:25,560
#### So this really leads to the final question an algorithm

135
00:06:25,560 --> 00:06:30,850
If no witnesses are found eight is greater than the square root of and

136
00:06:30,850 --> 00:06:32,590
then that we suddenly have proof

137
00:06:32,590 --> 00:06:39,590
and we halt and output prime

138
00:06:40,050 --> 00:06:43,620
So realize, we have two exit paths through our algorithm.

139
00:06:43,620 --> 00:06:48,780
both paths represent proof of certainty that n is either prime or composite.

140
00:06:48,780 --> 00:06:53,640
And when n is prime, we try our all possible divisors,

141
00:06:53,640 --> 00:06:55,400
and we basically rule them all out,

142
00:06:55,400 --> 00:06:57,990
and that is our proof that n is prime.

143
00:06:57,990 --> 00:07:03,240
The problem with this strategy is that our test value a –

144
00:07:03,240 --> 00:07:05,780
requires us to cycle through every prime --

145
00:07:05,780 --> 00:07:08,250
starting from 2 [and going] to the square root of n.

146
00:07:08,250 --> 00:07:11,660
so as n grows, the number of primes grows with it.

147
00:07:11,660 --> 00:07:15,720
It results in too many iterations in the worst case –

148
00:07:15,720 --> 00:07:18,870
such as when we provide a prime to our algorithm.

149
00:07:18,870 --> 00:07:20,550
Looking at the big picture now,

150
00:07:20,550 --> 00:07:23,670
realize it's providing proof when n is prime –

151
00:07:23,670 --> 00:07:26,900
which we now know we'd don't exactly need.

152
00:07:26,900 --> 00:07:29,460
No one said we needed to prove it.

153
00:07:29,460 --> 00:07:35,734
We just need it to be 99.9999 .. (fifteen 9s) percent certain.

154
00:07:35,734 --> 00:07:36,611
Hmm.

155
00:07:36,611 --> 00:07:39,280
So we actually need to think about the composite test

156
00:07:39,280 --> 00:07:43,370
that's being used in our algorithm.

157
00:07:43,370 --> 00:07:47,403
Remember, our fastest trial division primality tests –

158
00:07:47,403 --> 00:07:55,140
thus far – have tried to use prime patterns –

159
00:07:55,140 --> 00:07:56,065
such as six k – or all primes are of the form

160
00:07:56,065 --> 00:07:56,990
six k plus or minus one –

161
00:07:56,990 --> 00:07:58,940
to help walk along the primes only,

162
00:07:58,940 --> 00:08:02,090
and eliminate many of the composites – to save time.

163
00:08:02,090 --> 00:08:04,460
And remember, a test like this can be

164
00:08:04,460 --> 00:08:06,470
turned into a composite test –

165
00:08:06,470 --> 00:08:11,970
that is given some integer, n, is of the form

166
00:08:11,970 --> 00:08:13,510
six k plus or minus one,

167
00:08:13,510 --> 00:08:15,050
then we could say it's probably prime –

168
00:08:15,050 --> 00:08:18,940
but there are many composites still

169
00:08:18,940 --> 00:08:20,315
which follow this pattern.

170
00:08:20,315 --> 00:08:21,690
It doesn't include primes only –

171
00:08:21,690 --> 00:08:24,650
just all primes and some composites.

172
00:08:24,650 --> 00:08:27,940
And we can think of these extra composites as a leak.

173
00:08:27,940 --> 00:08:31,110
And this leak is our source of error.

174
00:08:31,110 --> 00:08:37,050
Now if we inverted and ask, "Is n not of the form

175
00:08:37,050 --> 00:08:39,060
six k plus or minus one,

176
00:08:39,060 --> 00:08:41,070
then we can say with 100% certainty it is composite.

177
00:08:41,070 --> 00:08:44,920
So the leak is our source of error on the prime side.

178
00:08:44,920 --> 00:08:46,550
But in this case it's unacceptable.

179
00:08:46,550 --> 00:08:49,240
It's not a nonnegligible error.

180
00:08:49,240 --> 00:08:51,330
There's a much larger probability [of this error occurring].

181
00:08:51,330 --> 00:08:57,390
We need to find a new composite testing procedure

182
00:08:57,390 --> 00:08:59,085
which is able to shrink this space,

183
00:08:59,085 --> 00:09:00,780
and make the chance of error negligible –

184
00:09:00,780 --> 00:09:05,880
which means we'll need to review

185
00:09:05,880 --> 00:09:08,150
how we can actually shrink errors with iterations.

186
00:09:08,150 --> 00:09:10,420
I think we should now post our ideas below

187
00:09:10,420 --> 00:09:14,890
regarding the kind of tests we might want to perform –

188
00:09:14,890 --> 00:09:16,310
and also – more importantly –

189
00:09:16,310 --> 00:09:21,200
ask, "How could a random generator really help us?"
