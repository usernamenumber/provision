1
00:00:00,579 --> 00:00:04,800
What I wanna do in this video is step trough the insertion sort function

2
00:00:04,800 --> 00:00:06,400
that we wrote in the last video.

3
00:00:06,400 --> 00:00:08,800
But before I do that I actually just want to focus on one part of it,

4
00:00:08,800 --> 00:00:13,600
cuz I realized that I used something that you probably don't reckognize

5
00:00:13,600 --> 00:00:15,000
cuz we haven't used it before.

6
00:00:15,000 --> 00:00:19,298
I used... I used the keyword right over here. I used BREAK

7
00:00:19,298 --> 00:00:21,600
and you might guess what BREAK means,

8
00:00:21,600 --> 00:00:23,267
but now I'll explain it explicitly.

9
00:00:23,267 --> 00:00:27,600
What BREAK means is: Break out of the smallest loop that you were doing

10
00:00:27,600 --> 00:00:31,667
so we were taking our item and we were kept comparing it to the thing to the left of it.

11
00:00:31,667 --> 00:00:33,600
We were taking value and kept comparing it to the left of it

12
00:00:33,600 --> 00:00:37,856
and as soon as we found value not beeing less than something to the left of it we said:

13
00:00:37,856 --> 00:00:40,738
Hei, we are done we don't have to keep going to the left

14
00:00:40,738 --> 00:00:44,667
and in that situation I wanna break the loop so we were breaking this WHILE loop

15
00:00:44,667 --> 00:00:48,800
and then we just continue in our next interation of this FOR loop over here.

16
00:00:48,800 --> 00:00:50,200
So that's what BREAK did.

17
00:00:50,200 --> 00:00:53,933
Now that out of the way let's actually step trough this program on a simple example.

18
00:00:53,933 --> 00:00:58,333
So let's say that someone calls... well let's just define...

19
00:00:58,333 --> 00:01:03,800
Let's just define a to be equal to... let me think about a fairly simple list...

20
00:01:03,800 --> 00:01:13,333
2, 1... I don't konw... 2, 1, 3, 2.

21
00:01:13,333 --> 00:01:19,200
I think it's a good list over there and let's assume that we are calling insertion_sort...

22
00:01:19,200 --> 00:01:24,533
insertion_sort... insertion_sort on a.

23
00:01:24,533 --> 00:01:26,533
Let's think about what's going to happen.

24
00:01:26,533 --> 00:01:30,933
Well the first thing ofcourse that list... Let's keep track of all of the variables here

25
00:01:30,933 --> 00:01:38,933
so one of... so list is right from the get code going to refer to: 2, 1, 3, 2.

26
00:01:38,933 --> 00:01:42,569
That's list right from the get code and then we enter into the function.

27
00:01:42,569 --> 00:01:46,667
For index in range and let's parse this part right over here.

28
00:01:46,667 --> 00:01:58,000
So what is LEN of the list. So LEN of our list is the same thing as LEN of 2, 1, 3, 2

29
00:01:58,000 --> 00:02:03,133
and this is just really the number of elements. LEN is short for length. Not that much shorter,

30
00:02:03,133 --> 00:02:07,067
but LEN of this is just going to be one, two, three, four.

31
00:02:07,067 --> 00:02:09,067
It's going to be equal to 4 elements.

32
00:02:09,067 --> 00:02:19,200
So this right over here is going to be 4 and on the call RANGE between 1 and LEN of list is 4.

33
00:02:19,200 --> 00:02:25,200
This will return the list... this will return the list, starting at 1 and up to but not including 4.

34
00:02:25,200 --> 00:02:27,333
1, 2, 3.

35
00:02:27,333 --> 00:02:30,800
And so these are the indices we want to use, because this...

36
00:02:30,800 --> 00:02:34,667
the first index is this right over here, second index is this right over here

37
00:02:34,667 --> 00:02:36,400
and the third index is that over here.

38
00:02:36,400 --> 00:02:41,867
Remember, this is the 0th index. So index is gonna keep incrementing between these two.

39
00:02:41,867 --> 00:02:44,200
It's gonna be 1 first, then 3, then 2.

40
00:02:44,200 --> 00:02:45,667
So let's just...

41
00:02:45,667 --> 00:02:51,800
Let me just create our variable index that's going to be whose scope is inside of the FOR loop.

42
00:02:51,800 --> 00:02:54,133
So let's say we have index.

43
00:02:54,133 --> 00:02:58,400
Index is going to start off beeing the first item.

44
00:02:58,400 --> 00:03:05,800
The first item in this list right here. The list is generated by range 1 coma LEN of list.

45
00:03:05,800 --> 00:03:08,867
So index is going to start off beeing 1

46
00:03:08,867 --> 00:03:14,533
and then over here we say value is equal to the index element in list.

47
00:03:14,533 --> 00:03:22,000
So let me define our variable value... value. So what is list of 1?

48
00:03:22,000 --> 00:03:27,067
What is the first element of the list? This is the 0th element, this is the 1st element

49
00:03:27,067 --> 00:03:29,400
so we are looking at this right over here.

50
00:03:29,400 --> 00:03:36,667
This is... It is the first element. So that's fair enough and then we define i to be index minus 1

51
00:03:36,667 --> 00:03:40,267
so let me put i over here and do a new colour.

52
00:03:40,267 --> 00:03:46,267
And now let's do i. It is index minus 1. Index is 1 so index minus 1 is 0.

53
00:03:46,267 --> 00:03:52,267
So it's the index of the item to the left of value. So that is going to be 0.

54
00:03:52,267 --> 00:03:54,241
This index is 1, this is 0

55
00:03:54,241 --> 00:03:59,933
and then we are saying WHILE i is greater than or equal to 0 do all of this bussiness over here

56
00:03:59,933 --> 00:04:02,933
and the first thing that we do over here is we compare value...

57
00:04:02,933 --> 00:04:08,333
we compare value to the object that is at the i'th element of the list.

58
00:04:08,333 --> 00:04:14,267
So let me write that over here. So list... list at i.

59
00:04:14,267 --> 00:04:20,600
So that is going to be the 0th element in the list. That is 2... That is 2.

60
00:04:20,600 --> 00:04:23,200
So we are comparing value. We are comparing 1.

61
00:04:23,200 --> 00:04:26,933
We are saying if 1 is less than the i'th element in list.

62
00:04:26,933 --> 00:04:32,133
If 1 is less than 2, then do this. Well 1 is definetly less than 2.

63
00:04:32,133 --> 00:04:35,200
We are essentially taking 1 and comparing it to the thing to the left and saying:

64
00:04:35,200 --> 00:04:36,933
Hei it's less than that so it's less than that.

65
00:04:36,933 --> 00:04:40,867
Let's shift this 2 to the right and let's shift 1 to the left

66
00:04:40,867 --> 00:04:44,667
and so we go into here and we say list i plus 1.

67
00:04:44,667 --> 00:04:45,800
So what's i plus 1?

68
00:04:45,800 --> 00:04:51,636
I plus 1 is 1. So this is list of 1. So this slot right over here.

69
00:04:51,636 --> 00:04:55,533
So this... in yellow that I just I don't know... so this slot over here.

70
00:04:55,533 --> 00:05:02,533
I is 0. I plus 1 is 1 so the i'th... the first item or the first slot is this slot right over here.

71
00:05:02,533 --> 00:05:06,533
Let's replace it whatever is at list.

72
00:05:06,533 --> 00:05:11,600
Whatever is in the i'th element or whatever is in the 0 slot as I guess I should call it.

73
00:05:11,600 --> 00:05:15,133
So let's replace it with this 2. Right, let me make it clear.

74
00:05:15,133 --> 00:05:20,133
In this time around this is 2 and this is the slot where the 1 was

75
00:05:20,133 --> 00:05:24,133
so we are going to put this.. we are going to replace that with 2

76
00:05:24,133 --> 00:05:28,200
and then in the place where the 2 was we are going to replace it with value

77
00:05:28,200 --> 00:05:30,548
and remember value was set to 1.

78
00:05:30,548 --> 00:05:36,225
So value is set to 1 and so our list now looks like 1, 2, 3, 2

79
00:05:36,225 --> 00:05:41,600
and hopefully this looks familiar if you remember when we first described the insertion_sort algorithm.

80
00:05:41,600 --> 00:05:46,067
So we go trough there and we don't... and then we... and now we want to decrement i.

81
00:05:46,067 --> 00:05:50,600
We say whatever i was. It's 1. We subtract 1. So now it's 0.

82
00:05:50,600 --> 00:05:56,867
So the new value for i is 0. The new value for i is 0.

83
00:05:56,867 --> 00:06:02,400
Actually... no, sorry. Whatever i was. I was 0. I was 0.

84
00:06:02,400 --> 00:06:07,133
You subtract 1 form that and now i is going to be negative 1.

85
00:06:07,133 --> 00:06:12,000
So now i is going to be... i is now going to be negative 1.

86
00:06:12,000 --> 00:06:16,487
And then we go to the WHILE loop and it says while i is greater than or equal to 0.

87
00:06:16,487 --> 00:06:21,000
Well i is now negative 1 so the WHILE loop no longer applies.

88
00:06:21,000 --> 00:06:25,800
This will return false. I is not greater than or equal to 0 so it won't perform any of this anymore.

89
00:06:25,800 --> 00:06:29,867
And so we'll now go to the next iteration of the FOR loop.

90
00:06:29,867 --> 00:06:35,333
And so now let's go to the... and essentially what's that signifying is that we are done with that element.

91
00:06:35,333 --> 00:06:38,667
We compared all the way to everything to the left of it and it found it's place

92
00:06:38,667 --> 00:06:40,933
or just found it's place in general.

93
00:06:40,933 --> 00:06:44,000
Now let's go to the first... next iteration of the FOR loop.

94
00:06:44,000 --> 00:06:46,267
Now index is going to be the next element.

95
00:06:46,267 --> 00:06:49,867
Now index instead of beeing 1 is going to be the next element

96
00:06:49,867 --> 00:06:52,867
in the list generated by this expression here.

97
00:06:52,867 --> 00:06:58,282
So index is now going to be 2... Index is now going to be 2

98
00:06:58,282 --> 00:07:06,533
and now list value is what's ever at the 2nd index so it's this item right over here.

99
00:07:06,533 --> 00:07:09,400
Notice. We were at the 2nd to the left now we are at the...

100
00:07:09,400 --> 00:07:15,533
we were at the first to the left or one right to the left of... it now or once base more to right.

101
00:07:15,533 --> 00:07:20,467
So value now is going to be 3. Value is now going to 3.

102
00:07:20,467 --> 00:07:22,400
I is going to be index minus 1.

103
00:07:22,400 --> 00:07:28,800
Index is 2. 2 minus 1 is... 2 minus 1 is 1. So this is...

104
00:07:28,800 --> 00:07:37,400
This is now 1. This is now 1 and we say; WHILE i is greater than or equal to 0.

105
00:07:37,400 --> 00:07:40,933
Well it's clearly greater than or zequal to... now greater than or equal to 0 now.

106
00:07:40,933 --> 00:07:45,133
Say if value is less than list the i'th element in list.

107
00:07:45,133 --> 00:07:50,400
So the value is 3 and is that less than... well what's at list i is no longer 2.

108
00:07:50,400 --> 00:07:55,533
So what in the first element. Well it actually still is 2. so it still is a 2.

109
00:07:55,533 --> 00:07:59,867
So if we look at the first element. The list... the first... the i'th element in list.

110
00:07:59,867 --> 00:08:05,000
I is 1. 0 1. It is still 2. So actually we didn't have to cross that out.

111
00:08:05,000 --> 00:08:08,467
It is still going to be.. it is still 2 right over there

112
00:08:08,467 --> 00:08:16,533
and so is... if 3 is less than 2 do this. Well 3 isn't less than 2 so you are going to do the else clause

113
00:08:16,533 --> 00:08:19,333
and you are just going to break out of this WHILE loop

114
00:08:19,333 --> 00:08:21,533
and that made sense because you said, hei look.

115
00:08:21,533 --> 00:08:25,800
We compared 3 immediately to the thing right before it to the left of it we say, hei

116
00:08:25,800 --> 00:08:29,800
3 is in the right place. 3 is greater than 2. It is not less than 2

117
00:08:29,800 --> 00:08:33,933
so I'm not going to do all this shifting bussiness. I don't shift 2 to the right and 3 to the left

118
00:08:33,933 --> 00:08:35,133
and then look at the next item.

119
00:08:35,133 --> 00:08:39,667
I know that everything to the left of 3 is already sorted so 3 is not less than 2.

120
00:08:39,667 --> 00:08:43,200
It's definitely not going to be less anything to the left of it and so we are done.

121
00:08:43,200 --> 00:08:44,667
We leave it the way it is.

122
00:08:44,667 --> 00:08:48,800
And so then we break out and we go to the next iteration of the FOR loop.

123
00:08:48,800 --> 00:08:53,800
So now index is going to be the next item here. It is now going to be equal to 3.

124
00:08:53,800 --> 00:08:57,133
The next item in this list generated by this expression

125
00:08:57,133 --> 00:09:01,990
so it's now going to be 3. Index is now going to be 3.

126
00:09:01,990 --> 00:09:08,400
Value is now going to be... is now going to be 0, 1, 2, 3...

127
00:09:08,400 --> 00:09:11,625
Value is now going to be this item right over here.

128
00:09:11,625 --> 00:09:16,667
That is going to be value, cuz our index is now 3 so our value is now 2.

129
00:09:16,667 --> 00:09:18,738
Let me cross these guys out.

130
00:09:18,738 --> 00:09:20,554
Let me save some space.

131
00:09:20,554 --> 00:09:31,067
Value is now 2 and now... and now i is 2... i is... oh let me... i is index minus 1.

132
00:09:31,067 --> 00:09:33,000
So 3 minus 1 so that is 2.

133
00:09:33,000 --> 00:09:35,733
So i is now going to be 2

134
00:09:35,733 --> 00:09:45,333
and the object that is at list at the 2th element on the list, 0, 1, 2, is now going to be... is now going to be 3.

135
00:09:45,333 --> 00:09:50,400
And so the first thing we do while i is greater or equal to 0 while i is clearly greater or equal to 0.

136
00:09:50,400 --> 00:09:51,785
It's 2 right now.

137
00:09:51,785 --> 00:09:58,533
If value. If 2 is less than what the i'th...the i'th... what's in the i'th slot of list

138
00:09:58,533 --> 00:10:02,400
so 2 is less than 3 so we do perform this right over here

139
00:10:02,400 --> 00:10:08,867
and so what we do is whatever is at list of i plus 1 so list of i plus 1.

140
00:10:08,867 --> 00:10:14,733
I is 2. I plus 1 is 3. So whatever is at this slot, which is the 3rd slot where the 2 was.

141
00:10:14,733 --> 00:10:17,467
Replace it whith whatever is to the left of it.

142
00:10:17,467 --> 00:10:18,933
So we replace it with the 3.

143
00:10:18,933 --> 00:10:22,533
So we are going to replace this with the 3 and the next element...

144
00:10:22,533 --> 00:10:28,667
Take whatever was... that slot to the left where i is and replace it ...

145
00:10:28,667 --> 00:10:32,000
And replace it with... and replace it with the value.

146
00:10:32,000 --> 00:10:37,733
And replace it with value so then we replaced it with value so this thing is now going to be

147
00:10:37,733 --> 00:10:43,600
a 2 again and so... and then we... and now decrement i again.

148
00:10:43,600 --> 00:10:48,067
Now i is equal to 1 and we go to the WHILE loop again.

149
00:10:48,067 --> 00:10:51,400
I is clearly greater than or equal to 0. It is 1.

150
00:10:51,400 --> 00:10:55,333
Value is still 2. Remember 2 is what we are comparing

151
00:10:55,333 --> 00:11:00,133
and while we go trough this WHILE loop we are comparing to each of the items to the left.

152
00:11:00,133 --> 00:11:04,800
If 2 is less than whatever is at the i'th slot in the list.

153
00:11:04,800 --> 00:11:07,067
So the first slot in the list is 2.

154
00:11:07,067 --> 00:11:11,933
Well 2 is equal to that, but it is not less than that, so we don't have to do anything anymore.

155
00:11:11,933 --> 00:11:14,067
The thing is sorted. The 2s are in the right place.

156
00:11:14,067 --> 00:11:18,133
If it's equal to the thing to the left of it we don't have to shift anything

157
00:11:18,133 --> 00:11:22,467
and that means it is at least equal or greater than everything to the left of that

158
00:11:22,467 --> 00:11:23,800
since everything is sorted.

159
00:11:23,800 --> 00:11:25,800
Everything is sorted already.

160
00:11:25,800 --> 00:11:27,267
So then we are done.

161
00:11:27,267 --> 00:11:33,867
If... Since 2 is not less than 2 we BREAK out and we break out in the FOR loop it says...

162
00:11:33,867 --> 00:11:37,800
Okay let me see if there is anything left in this list to apply index to.

163
00:11:37,800 --> 00:11:41,615
There isn't. We have used everything in that list and so we break out of the FOR loop

164
00:11:41,615 --> 00:11:43,733
and we are done and the list should be sorted.

165
00:11:43,733 --> 00:11:46,133
We see right here, the list is sorted.

166
00:11:46,133 --> 99:59:59,999
Our final sorted list is: 1, 2, 2 and 3.
