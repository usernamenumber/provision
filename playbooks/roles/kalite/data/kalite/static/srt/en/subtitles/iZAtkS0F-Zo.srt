1
00:00:00,000 --> 00:00:01,850
What I wanna do in this video is

2
00:00:01,850 --> 00:00:03,840
get ourselves a little bit more comfortable

3
00:00:03,840 --> 00:00:04,996
with the idea of strings.

4
00:00:04,996 --> 00:00:06,537
And also see the power of strings,

5
00:00:06,537 --> 00:00:08,365
and all the things we can do to them.

6
00:00:08,365 --> 00:00:09,623
or do with them.

7
00:00:09,623 --> 00:00:10,692
So what I'm gonna do up here is

8
00:00:10,692 --> 00:00:12,023
I'm gonna write a little simple program

9
00:00:12,023 --> 00:00:14,687
that will essentially just define a bunch of strings for me.

10
00:00:14,687 --> 00:00:16,685
And then I'm gonna use the Python interpreter

11
00:00:16,685 --> 00:00:17,929
to play with those strings

12
00:00:17,929 --> 00:00:19,046
and see what we can do to them.

13
00:00:19,046 --> 00:00:20,836
So let me define a string.

14
00:00:20,836 --> 00:00:22,834
Let's call the string "a"

15
00:00:22,834 --> 00:00:24,523
and "a" is—

16
00:00:24,523 --> 00:00:26,837
let's call it "My first test string".

17
00:00:26,837 --> 00:00:30,829
"My first test string"—

18
00:00:30,829 --> 00:00:31,821
right over there.

19
00:00:31,821 --> 00:00:32,983
As you know, a string is just

20
00:00:32,983 --> 00:00:35,836
a big sequence of characters right over here

21
00:00:35,836 --> 00:00:36,992
and you could recognize them

22
00:00:36,992 --> 00:00:38,393
because they'll either be in single

23
00:00:38,393 --> 00:00:39,995
or double quotation marks (' or ").

24
00:00:39,995 --> 00:00:41,013
And just to make clear that

25
00:00:41,013 --> 00:00:42,006
it doesn't have to be double ("),

26
00:00:42,006 --> 00:00:45,831
let me define "b" to be

27
00:00:45,831 --> 00:00:54,148
'Another test string that I have defined'

28
00:00:54,148 --> 00:00:56,671
And just to clarify on how you can define strings,

29
00:00:56,671 --> 00:00:58,848
you can actually put—

30
00:00:58,848 --> 00:01:00,671
quotations within the quotation marks

31
00:01:00,671 --> 00:01:04,200
as long as it's clear where the string begins and ends.

32
00:01:04,200 --> 00:01:05,677
So let's say you have something like this:

33
00:01:05,677 --> 00:01:14,169
So let's say you say "This is Sal's string"

34
00:01:14,169 --> 00:01:15,933
So in this example,

35
00:01:15,933 --> 00:01:17,697
this apostrophe is okay—

36
00:01:17,697 --> 00:01:19,795
it's a single quotation (') but it's okay

37
00:01:19,795 --> 00:01:22,544
because the interpreter will know that,

38
00:01:22,544 --> 00:01:24,629
"Look, the string starts with a double quote (")

39
00:01:24,629 --> 00:01:25,655
so I have to look for

40
00:01:25,655 --> 00:01:27,452
another double quote (") for it to end."

41
00:01:27,452 --> 00:01:28,757
So it's not going to say,

42
00:01:28,757 --> 00:01:30,246
"Oh, it ends at the single quote ('),"

43
00:01:30,246 --> 00:01:32,077
it says, "I need a double quote (")."

44
00:01:32,077 --> 00:01:33,646
So it knows that this whole thing is a string

45
00:01:33,646 --> 00:01:36,871
and it also knows that this apostrophe is just a character.

46
00:01:36,871 --> 00:01:39,785
One thing I couldn't have done—I can't do:

47
00:01:39,785 --> 00:01:41,569
Let's try to define string "d" here.

48
00:01:41,569 --> 00:01:44,538
So let's say, let me define it this way.

49
00:01:44,538 --> 00:01:46,046
So I couldn't have done this:

50
00:01:46,046 --> 00:01:50,015
'This is Sal's string'

51
00:01:50,015 --> 00:01:51,533
This doesn't make any sense,

52
00:01:51,533 --> 00:01:55,431
because here, we're opening with a single quotation,

53
00:01:55,431 --> 00:01:56,682
then it'll close right

54
00:01:56,682 --> 00:01:58,548
when we get to the next [single] quotation,

55
00:01:58,548 --> 00:02:00,385
and so all of this [s string'] is just gonna be some text

56
00:02:00,385 --> 00:02:01,826
that the interpreter is going to

57
00:02:01,826 --> 00:02:03,729
try to view as some type of program,

58
00:02:03,729 --> 00:02:04,852
and it's going to break on that.

59
00:02:04,852 --> 00:02:06,141
So if you want this to work,

60
00:02:06,141 --> 00:02:07,431
you can't have it like that.

61
00:02:07,431 --> 00:02:13,548
You can, you could do something like:

62
00:02:13,548 --> 00:02:15,856
'Sal's—no, you can't do that—

63
00:02:15,856 --> 00:02:17,518
So 'My favorite...

64
00:02:17,518 --> 00:02:18,820
and there are ways to do that

65
00:02:18,820 --> 00:02:19,802
and we're not gonna go into escape characters

66
00:02:19,802 --> 00:02:20,785
and all of that right now,

67
00:02:20,785 --> 00:02:25,000
but, 'My favorite word is...

68
00:02:25,000 --> 00:02:27,000
and actually I don't know what my favorite word is,

69
00:02:27,000 --> 00:02:29,308
I'm kind of putting myself on the spot.

70
00:02:29,308 --> 00:02:33,687
But let's say 'My favorite word is "asparagus"...

71
00:02:33,687 --> 00:02:35,646
As...I can't even spell it.

72
00:02:35,646 --> 00:02:37,605
As...asparagus.

73
00:02:37,605 --> 00:02:43,533
So 'My favorite word is "aspara[g]us", what is yours?'

74
00:02:43,533 --> 00:02:45,587
So once again this is legitimate because

75
00:02:45,587 --> 00:02:48,087
I start my string with a single quotation mark,

76
00:02:48,087 --> 00:02:48,587
so it says,

77
00:02:48,587 --> 00:02:50,045
"Look, let's not end the string

78
00:02:50,045 --> 00:02:52,323
until we get to another single quotation mark."

79
00:02:52,323 --> 00:02:54,800
So it's not like it'll confuse the interpreter

80
00:02:54,800 --> 00:02:56,754
when it sees this first double quotation

81
00:02:56,754 --> 00:02:58,064
'cause it knows that

82
00:02:58,064 --> 00:02:59,682
the string started with a single quotation.

83
00:02:59,682 --> 00:03:01,880
Let me show you some other examples of strings,

84
00:03:01,880 --> 00:03:04,169
and these will be interesting to deal with.

85
00:03:04,169 --> 00:03:05,857
And they don't always have to be named [labels?]

86
00:03:05,857 --> 00:03:09,682
so let me call this my "math_string"

87
00:03:09,682 --> 00:03:19,185
And let's call this—let's say this is "3+4*2"

88
00:03:19,185 --> 00:03:20,503
So that's a math string.

89
00:03:20,503 --> 00:03:21,821
it's really just a string of characters.

90
00:03:21,821 --> 00:03:24,908
The interpreter won't evaluate it,

91
00:03:24,908 --> 00:03:27,502
it literally just views it as a string of characters.

92
00:03:27,502 --> 00:03:30,556
So I think this is a pretty good—

93
00:03:30,556 --> 00:03:33,948
let me do one other kind of pseudo-math-string

94
00:03:33,948 --> 00:03:35,385
or let me do another expression,

95
00:03:35,385 --> 00:03:36,852
let me call this an expression string.

96
00:03:36,852 --> 00:03:39,382
So that's just the name of the variable,

97
00:03:39,382 --> 00:03:44,375
and let me say, my expression string is...

98
00:03:44,375 --> 00:03:49,000
let's say it's "a+...

99
00:03:49,000 --> 00:03:52,469
and then I'm have a kind of string inside of that string (' ')

100
00:03:52,469 --> 00:04:01,395
...+b+' tiger'"

101
00:04:01,395 --> 00:04:02,818
right over there.

102
00:04:02,818 --> 00:04:03,829
So this is just—

103
00:04:03,829 --> 00:04:05,795
so everything inbetween the double quotation marks

104
00:04:05,795 --> 00:04:07,771
the interpreter is just going to view

105
00:04:07,771 --> 00:04:09,748
as a bunch of characters.

106
00:04:09,748 --> 00:04:11,810
Well, there are interesting things

107
00:04:11,810 --> 00:04:13,518
that we might be able to do with this eventually.

108
00:04:13,518 --> 00:04:15,990
So that's enough strings for me to define,

109
00:04:15,990 --> 00:04:19,846
so let me save this file right now and let me run it.

110
00:04:19,846 --> 00:04:20,849
And what this does—

111
00:04:20,849 --> 00:04:22,698
now in this environment all of these strings are defined

112
00:04:22,698 --> 00:04:24,003
and I can verify it by that I can say

113
00:04:24,003 --> 00:04:26,000
"a", 'My first test string'

114
00:04:26,000 --> 00:04:28,102
"b", 'Another test string that I have defined,'

115
00:04:28,102 --> 00:04:30,559
"c", "This is Sal's string"

116
00:04:30,559 --> 00:04:32,713
"d", 'My favorite word is...

117
00:04:32,713 --> 00:04:33,513
"aspara...

118
00:04:33,513 --> 00:04:34,425
"asparaus"...

119
00:04:34,425 --> 00:04:36,095
I couldn't even spell "asparagus" properly,

120
00:04:36,095 --> 00:04:37,179
maybe we'll have to fix that.

121
00:04:37,179 --> 00:04:39,062
..."asparaus", what is yours?'

122
00:04:39,062 --> 00:04:41,292
That needs a "g", asparaGus!

123
00:04:41,292 --> 00:04:42,585
...What is yours?'

124
00:04:42,585 --> 00:04:43,987
And then we have—

125
00:04:43,987 --> 00:04:45,759
it's a good thing this isn't the spelling video—

126
00:04:45,759 --> 00:04:47,698
we can look at what math_string looks like,

127
00:04:47,698 --> 00:04:50,456
math_string, it's literally that string of characters.

128
00:04:50,456 --> 00:04:51,975
And then we have the expression string.

129
00:04:51,975 --> 00:04:57,148
The expression_string literally just that string of characters.

130
00:04:57,148 --> 00:04:58,977
Now let's start to play around

131
00:04:58,977 --> 00:04:59,960
with some of these strings

132
00:04:59,960 --> 00:05:01,344
and see what we can do with them.

133
00:05:01,344 --> 00:05:03,138
So, a couple of things,

134
00:05:03,138 --> 00:05:04,348
we can say, "Hey, how long is a string?"

135
00:05:04,348 --> 00:05:07,900
And there we could use the built-in Python function len()

136
00:05:07,900 --> 00:05:09,882
which is short for length.

137
00:05:09,882 --> 00:05:13,990
So the len() of a [len(a)],

138
00:05:13,990 --> 00:05:16,959
it says, "Hey, there's twenty character in a!"

139
00:05:16,959 --> 00:05:18,231
Let's count it, let's verify it.

140
00:05:18,231 --> 00:05:20,487
1, 2, space (' ') is a character,

141
00:05:20,487 --> 00:05:28,621
[counting to twenty]

142
00:05:28,621 --> 00:05:29,954
Yes, twenty characters!

143
00:05:29,954 --> 00:05:34,600
What's the the len() of math_string?

144
00:05:34,600 --> 00:05:37,144
len(), length for short.

145
00:05:37,144 --> 00:05:38,100
math_string is five characters.

146
00:05:38,100 --> 00:05:39,056
Let's count 'em.

147
00:05:39,056 --> 00:05:41,856
1 2 3 4 5 characters.

148
00:05:41,856 --> 00:05:43,579
Makes a lot of sense.

149
00:05:43,579 --> 00:05:44,441
We could do it for any of them,

150
00:05:44,441 --> 00:05:45,964
and I encourage you to try this out yourself;

151
00:05:45,964 --> 00:05:47,841
really experiment, become comfortable with this.

152
00:05:47,841 --> 00:05:50,366
Now, the next thing I want to do is show you

153
00:05:50,366 --> 00:05:52,169
how to concatenate two strings.

154
00:05:52,169 --> 00:05:53,395
Sounds like a very fancy word,

155
00:05:53,395 --> 00:05:55,375
but it really just means connect them together.

156
00:05:55,375 --> 00:05:57,910
So, for example, I would say,

157
00:05:57,910 --> 00:06:00,646
let's create a new string, let's call it,

158
00:06:00,646 --> 00:06:07,671
"a▁with▁b", and I'll define it as a+b

159
00:06:07,671 --> 00:06:09,631
So I'm doing something very interesting here.

160
00:06:09,631 --> 00:06:12,025
You're used to using the addition operator (+) with numbers,

161
00:06:12,025 --> 00:06:16,375
but I'm about to add two strings.

162
00:06:16,375 --> 00:06:17,887
Let's see what this looks like.

163
00:06:17,887 --> 00:06:21,082
So, let's look what a▁with▁b looks like.

164
00:06:21,082 --> 00:06:23,267
a▁with▁b is just a variable.

165
00:06:23,267 --> 00:06:24,929
Now, what happened?

166
00:06:24,929 --> 00:06:26,987
I had a, which is "My first test string,"

167
00:06:26,987 --> 00:06:28,363
and I had b, which is

168
00:06:28,363 --> 00:06:30,092
'Another test string that I have defined'

169
00:06:30,092 --> 00:06:31,982
When I took a+b,

170
00:06:31,982 --> 00:06:33,871
it took a, "My first test string,"

171
00:06:33,871 --> 00:06:36,385
and it added b to the end of it!

172
00:06:36,385 --> 00:06:37,846
It concatenated b to a—

173
00:06:37,846 --> 00:06:41,154
concatenate is just a fancy word for "put 'em together!"

174
00:06:41,154 --> 00:06:42,702
'Another test string that I have defined,'

175
00:06:42,702 --> 00:06:43,819
so it merged a—

176
00:06:43,819 --> 00:06:44,936
I guess you could view it,

177
00:06:44,936 --> 00:06:46,646
it put b at the end of a.

178
00:06:46,646 --> 00:06:47,590
And you could go the other way,

179
00:06:47,590 --> 00:06:50,841
you could call it b▁with▁a—

180
00:06:50,841 --> 00:06:53,933
let's say that is b+a.

181
00:06:53,933 --> 00:06:55,664
And then let's look at what that looks like,

182
00:06:55,664 --> 00:06:58,041
b▁with▁a...

183
00:06:58,041 --> 00:06:59,452
Now it's the other way around.

184
00:06:59,452 --> 00:07:01,405
a is added to the end of b.

185
00:07:01,405 --> 00:07:03,487
So you can do very very fascinating strings, you know,

186
00:07:03,487 --> 00:07:07,379
if we did math▁string+expression▁string

187
00:07:07,379 --> 00:07:08,974
I'm not gonna set it to any variable,

188
00:07:08,974 --> 00:07:10,369
I'm just gonna see what I get if I...

189
00:07:10,369 --> 00:07:16,236
evaluate that math▁string+expression▁string

190
00:07:16,236 --> 00:07:19,708
Then I essentially got these two strings added together,

191
00:07:19,708 --> 00:07:22,882
and so this string got put at the end of this string,

192
00:07:22,882 --> 00:07:24,038
and you see it right there

193
00:07:24,038 --> 00:07:25,256
and it's this kind of bizarre looking string,

194
00:07:25,256 --> 00:07:26,031
but it is a string!

195
00:07:26,031 --> 00:07:27,190
Everything between these characters,

196
00:07:27,190 --> 00:07:29,000
everything between the double quotations

197
00:07:29,000 --> 00:07:30,864
is just viewed as a character.

198
00:07:30,864 --> 00:07:32,975
These are just characters.

199
00:07:32,975 --> 00:07:35,229
Now, there's many many many many

200
00:07:35,229 --> 00:07:36,469
other things we can do with strings,

201
00:07:36,469 --> 00:07:38,729
I'm not going to introduce you to all of them.

202
00:07:38,729 --> 00:07:40,918
But strings come with a bunch of functions,

203
00:07:40,918 --> 00:07:42,520
and if you have an Integrated Development Environment,

204
00:07:42,520 --> 00:07:43,569
it'll often tell you

205
00:07:43,569 --> 00:07:45,333
what types of functions you could use.

206
00:07:45,333 --> 00:07:46,446
For example,

207
00:07:46,446 --> 00:07:48,172
you might wanna split(),

208
00:07:48,172 --> 00:07:50,698
maybe you want a list of all the words in a string.

209
00:07:50,698 --> 00:07:53,408
So maybe I'm writing some type of program,

210
00:07:53,408 --> 00:07:55,902
and I wanna take this string that's in b

211
00:07:55,902 --> 00:07:57,648
and I want to put each of these words

212
00:07:57,648 --> 00:07:59,133
as a separate element in a list.

213
00:07:59,133 --> 00:08:02,366
So what I can do is, I can say b dot (b.)

214
00:08:02,366 --> 00:08:04,692
and I'll call one of the methods of b

215
00:08:04,692 --> 00:08:06,497
and we'll do much more on methods

216
00:08:06,497 --> 00:08:08,625
and object-oriented progamming and all of that,

217
00:08:08,625 --> 00:08:11,528
but we can view b as a string object,

218
00:08:11,528 --> 00:08:14,108
and it has its own methods and can operate on itself.

219
00:08:14,108 --> 00:08:15,369
For now you can just say,

220
00:08:15,369 --> 00:08:20,023
"Look, if I wanted to split b into its component words,

221
00:08:20,023 --> 00:08:22,415
I can cal lthe split() method."

222
00:08:22,415 --> 00:08:24,364
I could call the split() method,

223
00:08:24,364 --> 00:08:27,993
and I can say, "What do I want to split it on?"

224
00:08:27,993 --> 00:08:29,831
So when I say "split,"

225
00:08:29,831 --> 00:08:32,287
I mean separate this string into a bunch of things

226
00:08:32,287 --> 00:08:35,667
and put them into a list and split the string

227
00:08:35,667 --> 00:08:37,354
wherever I see a space.

228
00:08:37,354 --> 00:08:39,600
So let's see what we return when we get that.

229
00:08:39,600 --> 00:08:41,266
So notice: it took this string,

230
00:08:41,266 --> 00:08:42,748
"Another test string that I have defined,"

231
00:08:42,748 --> 00:08:45,392
it separated the string wherever there's a space,

232
00:08:45,392 --> 00:08:48,252
and took what's on either side of the space

233
00:08:48,252 --> 00:08:50,195
and put it as an element in a list.

234
00:08:50,195 --> 00:08:51,138
Could be useful,

235
00:08:51,138 --> 00:08:52,544
if you're doing some kind of text processing.

236
00:08:52,544 --> 00:08:53,721
But I want to show you,

237
00:08:53,721 --> 00:08:58,882
it doesn't have to split just where you have a space,

238
00:08:58,882 --> 00:09:01,990
you could say "b.split()"

239
00:09:01,990 --> 00:09:05,067
and you could say split whenever there's a 't'.

240
00:09:05,067 --> 00:09:06,934
So you can split on the t

241
00:09:06,934 --> 00:09:08,538
and this will give you some bizarre-looking thing...

242
00:09:08,538 --> 00:09:10,666
So notice: every time there was a 't',

243
00:09:10,666 --> 00:09:13,118
it split the string there and it put whatever

244
00:09:13,118 --> 00:09:14,936
was on each side of those 't's,

245
00:09:14,936 --> 00:09:19,185
and put them into a separate element in this list over here.

246
00:09:19,185 --> 00:09:20,774
So a very fascinating thing,

247
00:09:20,774 --> 00:09:22,000
you can do things like...

248
00:09:22,000 --> 00:09:25,133
finding where a character is in a string.

249
00:09:25,133 --> 00:09:29,897
So let's say you wanna call—I don't know—

250
00:09:29,897 --> 00:09:32,579
let's try the math_string,

251
00:09:32,579 --> 00:09:35,262
and I wanna find in the math_string,

252
00:09:35,262 --> 00:09:36,636
(one of its methods),

253
00:09:36,636 --> 00:09:39,102
I want to find that asterisk

254
00:09:39,102 --> 00:09:40,774
(another word I have trouble saying).

255
00:09:40,774 --> 00:09:42,295
So find() the asterisk.

256
00:09:42,295 --> 00:09:45,046
Tell me which character, if any, has an asterisk in it.

257
00:09:45,046 --> 00:09:47,333
It tells us the third character does.

258
00:09:47,333 --> 00:09:48,990
Let's verify it.

259
00:09:48,990 --> 00:09:52,236
So this is the zeroth character,

260
00:09:52,236 --> 00:09:53,229
that's the beginning,

261
00:09:53,229 --> 00:09:55,005
that's the convention in most computer programs.

262
00:09:55,005 --> 00:09:56,298
Zeroth character,

263
00:09:56,298 --> 00:09:58,421
first character, second character, third character...

264
00:09:58,421 --> 00:10:00,256
is an asterisk.

265
00:10:00,256 --> 00:10:01,923
If you wanted to find the 3,

266
00:10:01,923 --> 00:10:04,852
and I really encourage you to experiment with this,

267
00:10:04,852 --> 00:10:07,023
find() the 3!

268
00:10:07,023 --> 00:10:09,195
It's the zeroth character there.

269
00:10:09,195 --> 00:10:11,015
Now, there's other stuff,

270
00:10:11,015 --> 00:10:13,190
you can replace() characters, you can say,

271
00:10:13,190 --> 00:10:21,834
"Look, let's take c and let's replace...

272
00:10:21,834 --> 00:10:24,954
and you can either look it up in a book,

273
00:10:24,954 --> 00:10:26,205
or just do a web search,

274
00:10:26,205 --> 00:10:28,795
you can normally find all of the libraries for Python strings,

275
00:10:28,795 --> 00:10:30,874
or if you have an IDE,

276
00:10:30,874 --> 00:10:33,815
it'll suggest things that you can do to strings

277
00:10:33,815 --> 00:10:35,338
and how you do it.

278
00:10:35,338 --> 00:10:37,631
But let's say we want to replace,

279
00:10:37,631 --> 00:10:43,215
in string c, all of the 'i's with 'o's.

280
00:10:43,215 --> 00:10:45,113
Let's see what we get.

281
00:10:45,113 --> 00:10:50,129
So there you go, it was "This is Sal's string,"

282
00:10:50,129 --> 00:10:51,554
and it replaced it with 'o's,

283
00:10:51,554 --> 00:10:53,318
and I want to be clear; it didn't change string c!

284
00:10:53,318 --> 00:10:56,775
It created a copy of c with the 'i's replaced by 'o's.

285
00:10:56,775 --> 00:10:59,995
So then it became "Thos os Sal's strong."

286
00:10:59,995 --> 00:11:03,733
(Sounds like a Nordic language of some kind.)

287
00:11:03,733 --> 00:11:06,856
And, just to be clear, c did not change.

288
00:11:06,856 --> 00:11:17,215
But if I took, if I said c = c.replace('i','o')

289
00:11:17,215 --> 00:11:21,569
then, c has changed to "Thos os Sal's strong."

290
00:11:21,569 --> 00:11:23,572
Now, the last thing I want to do

291
00:11:23,572 --> 00:11:25,529
is show you a very magical function

292
00:11:25,529 --> 00:11:26,669
(at least, from my point of view).

293
00:11:26,669 --> 00:11:28,056
And that's the eval() function.

294
00:11:28,056 --> 00:11:31,800
And it exists in interpretative languages like Python

295
00:11:31,800 --> 00:11:33,913
(and it also exists in JavaScript)

296
00:11:33,913 --> 00:11:37,100
and what's really cool is, is it can evaluate a string.

297
00:11:37,100 --> 00:11:38,764
It can view a string,

298
00:11:38,764 --> 00:11:40,543
you can treat it as a string for a while

299
00:11:40,543 --> 00:11:41,779
and you can construct it,

300
00:11:41,779 --> 00:11:44,092
so you could, for example, have a computer program

301
00:11:44,094 --> 00:11:45,741
that writes another computer program inside a string

302
00:11:45,741 --> 00:11:49,205
and then evaluates that computer program.

303
00:11:49,205 --> 00:11:51,836
So that should get you philosophically thinking a little bit.

304
00:11:51,836 --> 00:11:54,749
So, for example, if I just say math_string,

305
00:11:54,749 --> 00:11:57,323
it's just a string of characters.

306
00:11:57,323 --> 00:12:02,120
But if I say eval(math_string),

307
00:12:02,120 --> 00:12:06,795
the interpreter will actually evaluate what's inside of this.

308
00:12:06,795 --> 00:12:08,698
So it'll actually treat it as an expression.

309
00:12:08,698 --> 00:12:09,998
And so I get 11,

310
00:12:09,998 --> 00:12:11,190
so it takes math_string and it says,

311
00:12:11,190 --> 00:12:13,205
"Okay, now let me treat that like a program,"

312
00:12:13,205 --> 00:12:16,087
so it's "3+4*2", order of operations,

313
00:12:16,087 --> 00:12:18,200
does the 4*2 first so that's 8.

314
00:12:18,200 --> 00:12:21,031
3 + 8 is 11.

315
00:12:21,031 --> 00:12:22,579
And you can do even cooler things!

316
00:12:22,579 --> 00:12:24,318
You can do "eval("—

317
00:12:24,318 --> 00:12:26,056
let's think about this—"math_string"—

318
00:12:26,056 --> 00:12:31,395
and let's add to math_string a character,

319
00:12:31,395 --> 00:12:33,225
the character '1'.

320
00:12:33,225 --> 00:12:34,456
And let's see what it gets us.

321
00:12:34,456 --> 00:12:37,200
It gets us 87, what did it do?!

322
00:12:37,200 --> 00:12:38,790
Well, what it did is,

323
00:12:38,790 --> 00:12:41,744
math_string is this stuff but if you add a 1 to it,

324
00:12:41,744 --> 00:12:43,167
it would look like that [3+4*21],

325
00:12:43,167 --> 00:12:45,005
the 2 would become a 21,

326
00:12:45,005 --> 00:12:47,498
we're concatenating a 1 to the end of it.

327
00:12:47,498 --> 00:12:50,821
So it became 4*21 which is 84,

328
00:12:50,821 --> 00:12:52,852
+3 which is 87.

329
00:12:52,852 --> 00:12:54,046
And you can do other things,

330
00:12:54,046 --> 00:12:56,210
we can evaluate this expression_string right over here,

331
00:12:56,210 --> 00:12:57,436
that's why I set it up like that.

332
00:12:57,436 --> 00:13:02,308
eval(expression_string)

333
00:13:02,308 --> 00:13:03,243
Really fun to play with,

334
00:13:03,243 --> 00:13:04,179
I could do this all day!

335
00:13:04,179 --> 00:13:05,652
eval(expression_string)

336
00:13:05,652 --> 00:13:07,110
Remember, expression_string is just a string,

337
00:13:07,110 --> 00:13:07,985
but when we evaluate it,

338
00:13:07,985 --> 00:13:10,000
you might want to pause and think what you're going to get.

339
00:13:10,000 --> 00:13:11,529
So let's evaluate it.

340
00:13:11,529 --> 00:13:14,241
I got all this craziness! Where did that come from?

341
00:13:14,241 --> 00:13:17,308
Well, in the string, these were just characters, 'a' and 'b'

342
00:13:17,308 --> 00:13:19,690
but when I evaluated it in our current context,

343
00:13:19,690 --> 00:13:22,348
a and b are variables and they represent strings.

344
00:13:22,348 --> 00:13:24,195
So when you evaluate this thing,

345
00:13:24,195 --> 00:13:25,795
it's gonna say, "Okay, a is a string,

346
00:13:25,795 --> 00:13:26,887
it's 'My first text string,'

347
00:13:26,887 --> 00:13:30,082
concatenate or put this space at the end of it".

348
00:13:30,082 --> 00:13:31,123
So, "My first test string"

349
00:13:31,123 --> 00:13:32,164
and then I have a space,

350
00:13:32,164 --> 00:13:34,190
and then, put b at the end of that,

351
00:13:34,190 --> 00:13:38,215
so "Another test string that I have defined,"

352
00:13:38,231 --> 00:13:39,423
then put...

353
00:13:39,423 --> 00:13:40,641
then put a...

354
00:13:40,641 --> 00:13:42,318
SPACE TIGER

355
00:13:42,318 --> 00:13:44,190
and then you have a space tiger.

356
00:13:44,190 --> 00:13:45,631
So I'm gonna leave you there...

357
00:13:45,631 --> 00:13:47,195
as you can imagine,

358
00:13:47,195 --> 00:13:49,556
strings are a super super duper powerful concepts

359
00:13:49,556 --> 00:13:51,492
for doing a bunch of applications.

360
00:13:51,492 --> 00:13:53,792
And I haven't exhausted anywhere

361
00:13:53,792 --> 00:13:55,615
near all the things you can do with them,

362
00:13:55,615 --> 00:13:57,538
so I encourage you to experiment.
