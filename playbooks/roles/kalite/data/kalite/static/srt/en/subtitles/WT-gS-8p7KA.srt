1
00:00:00,000 --> 00:00:02,385
So the videos that I've been making

2
00:00:02,385 --> 00:00:03,990
using these Python examples,

3
00:00:03,990 --> 00:00:08,531
I've been using Python 2,

4
00:00:08,531 --> 00:00:10,995
which is kind of the standard version of Python

5
00:00:10,995 --> 00:00:12,546
that most of the implementations are in

6
00:00:12,546 --> 00:00:14,390
at the time of making this video.

7
00:00:14,390 --> 00:00:19,692
But there is also a Python 3,

8
00:00:19,692 --> 00:00:22,374
which is kind of the state of the art version of Python,

9
00:00:22,374 --> 00:00:25,010
or I guess you could say it's the newest version of Python.

10
00:00:25,010 --> 00:00:26,990
But it's not backwards compatible.

11
00:00:26,990 --> 00:00:28,695
When I say backwards compatible,

12
00:00:28,695 --> 00:00:31,524
it means that if you are running Python 3,

13
00:00:31,524 --> 00:00:34,846
it will not necessarily be able to interpret everything

14
00:00:34,846 --> 00:00:36,992
that is written in Python 2.

15
00:00:36,992 --> 00:00:38,985
So that's what we mean by backwards compatibility:

16
00:00:38,985 --> 00:00:43,972
You can't take a program that was written in Python 2—

17
00:00:43,972 --> 00:00:44,990
so let's take a program—

18
00:00:44,990 --> 00:00:46,834
that's the program right there—

19
00:00:46,834 --> 00:00:50,015
and let's say it runs fine in Python 2.

20
00:00:50,015 --> 00:00:51,831
If you take that same program

21
00:00:51,831 --> 00:00:54,529
and try to run it in a Python 3 interpreter,

22
00:00:54,529 --> 00:00:55,994
it's not going to work.

23
00:00:55,994 --> 00:00:56,843
So this means,

24
00:00:56,843 --> 00:01:03,011
so this is not backwards compatible.

25
00:01:03,011 --> 00:01:04,225
If this did work,

26
00:01:04,225 --> 00:01:07,018
then Python 3 would be "backwards compatible".

27
00:01:07,018 --> 00:01:07,995
And the whole reason—

28
00:01:07,995 --> 00:01:10,018
well you know this is actually a nice understanding of

29
00:01:10,018 --> 00:01:11,537
what even backwards compatibility means—

30
00:01:11,537 --> 00:01:13,025
but the whole point of making this video is

31
00:01:13,025 --> 00:01:16,543
the program that I ran in the last video

32
00:01:16,543 --> 00:01:20,554
will work in Python 2,

33
00:01:20,554 --> 00:01:22,690
but it will not work in Python 3.

34
00:01:22,690 --> 00:01:25,010
And the reason why it doesn't work in Python 3 is

35
00:01:25,010 --> 00:01:28,538
Python 3 has a different version...

36
00:01:28,538 --> 00:01:32,992
...of this input function over here.

37
00:01:32,992 --> 00:01:39,538
In Python 2, if you use the input function just like I used it—

38
00:01:39,538 --> 00:01:46,005
I put a message here for the user of what to input

39
00:01:46,005 --> 00:01:48,552
and when the user inputs something,

40
00:01:48,552 --> 00:01:54,009
it'll be returned to the program fully evaluated.

41
00:01:54,009 --> 00:01:56,698
So in this case, if the user enters a number,

42
00:01:56,698 --> 00:01:58,375
I get the number as a number.

43
00:01:58,375 --> 00:02:07,190
So I literally get the evaluated expression.

44
00:02:07,190 --> 00:02:09,395
So like we saw in the last few examples,

45
00:02:09,395 --> 00:02:11,002
if the user puts in a 4,

46
00:02:11,002 --> 00:02:13,995
then the number 4 will be put in the variable "number".

47
00:02:13,995 --> 00:02:17,543
If the user inputs literally 3 + 4,

48
00:02:17,543 --> 00:02:23,523
then the number 7 will be put into the variable "number".

49
00:02:23,523 --> 00:02:24,682
In Python 3

50
00:02:24,682 --> 00:02:27,015
the input function does something slightly different

51
00:02:27,015 --> 00:02:29,533
and it's enough to break this program

52
00:02:29,533 --> 00:02:32,013
if you were to try to run it in Python 3.

53
00:02:32,013 --> 00:02:34,538
In Python 3,

54
00:02:34,538 --> 00:02:38,987
the input function doesn't return the evaluated expression,

55
00:02:38,987 --> 00:02:41,005
it returns a string—

56
00:02:41,005 --> 00:02:42,244
and this is a word you're going to...

57
00:02:42,244 --> 00:02:43,696
...hear a lot of in computer science,

58
00:02:43,696 --> 00:02:45,379
and I'll explain it in multiple videos—

59
00:02:45,379 --> 00:02:54,990
but it returns a string of what the user inputted.

60
00:02:54,990 --> 00:02:57,987
And you're saying "Sal, what is a string?"

61
00:02:57,987 --> 00:02:59,369
And this is actually a good introduction:

62
00:02:59,369 --> 00:03:01,008
A string is a "string of characters".

63
00:03:01,008 --> 00:03:03,385
So, to—maybe—make the difference,

64
00:03:03,385 --> 00:03:07,379
if I—if the user inputs—

65
00:03:07,379 --> 00:03:09,536
right over here, this is coming from the user,

66
00:03:09,536 --> 00:03:15,700
if the user inputs—in the Python 2 version—2 × 6,

67
00:03:15,700 --> 00:03:18,369
then what will be stored in the variable "number"

68
00:03:18,369 --> 00:03:21,385
will be the 2 × 6, so it will be 12,

69
00:03:21,385 --> 00:03:23,995
it will actually be evaluated.

70
00:03:23,995 --> 00:03:26,390
In Python 3, if we just did this,

71
00:03:26,390 --> 00:03:28,995
and the user inputted 2 × 6—

72
00:03:28,995 --> 00:03:31,385
so once again the user inputs 2 × 6—

73
00:03:31,385 --> 00:03:33,526
then what's stored in the variable "number",

74
00:03:33,526 --> 00:03:36,535
what's returned from this function right over here,

75
00:03:36,535 --> 00:03:39,375
is not going to be 2 × 6 evaluated.

76
00:03:39,375 --> 00:03:44,990
It is going to be a string of characters that says "2 × 6".

77
00:03:44,990 --> 00:03:48,021
So this is the string and a string is really—

78
00:03:48,021 --> 00:03:50,364
you can view it as a string of characters.

79
00:03:50,364 --> 00:03:53,369
you can kind of view it as some text

80
00:03:53,369 --> 00:03:56,382
that's not actually interpreted in any way.

81
00:03:56,382 --> 00:03:58,010
So it will actually return that string of characters,

82
00:03:58,010 --> 00:03:59,518
then you'd have that string of characters...

83
00:03:59,518 --> 00:04:00,979
...put here in "number"

84
00:04:00,979 --> 00:04:03,379
and then the function here "range" would break down

85
00:04:03,379 --> 00:04:04,979
because it's like I'm trying to take the range of...

86
00:04:04,979 --> 00:04:07,395
...like a word, not like a number here.

87
00:04:07,395 --> 00:04:09,390
So thats why it would break in Python 3.

88
00:04:09,390 --> 00:04:12,985
So if you want that original function to work in Python 3,

89
00:04:12,985 --> 00:04:15,969
what you have to do is put an—

90
00:04:15,969 --> 00:04:17,969
so instead of just calling "input" like this,

91
00:04:17,969 --> 00:04:19,395
you have to—and i will write it below this—

92
00:04:19,395 --> 00:04:25,054
you'd have to write "eval" and then write "input"—

93
00:04:25,054 --> 00:04:27,959
and then you write "input"

94
00:04:27,959 --> 00:04:31,359
and then it quotes all of the stuff I wrote up here,

95
00:04:31,359 --> 00:04:34,375
colons, close quotes, close parentheses

96
00:04:34,375 --> 00:04:38,515
and then close the eval() parentheses right over there.

97
00:04:38,515 --> 00:04:42,379
What eval() does is that it can take a string of characters,

98
00:04:42,379 --> 00:04:44,385
it can take some text like this.

99
00:04:44,385 --> 00:04:45,972
And it will evaluate it.

100
00:04:45,972 --> 00:04:47,529
So what happens is that

101
00:04:47,529 --> 00:04:51,975
in Python 3 you'll get this string and when you eval it—

102
00:04:51,975 --> 00:04:56,538
so then you would do an eval() on this—

103
00:04:56,538 --> 00:04:59,395
so you're doing an eval() on the input()—

104
00:04:59,395 --> 00:05:00,682
the user puts some input,

105
00:05:00,682 --> 00:05:03,000
so then you're doing an eval() on what the user inputted,

106
00:05:03,000 --> 00:05:08,690
and then this will return 12.

107
00:05:08,690 --> 00:05:11,025
So in Python 2, the input function kind of does it all for you,

108
00:05:11,025 --> 00:05:12,971
in Python 3 it returns a string

109
00:05:12,971 --> 00:05:14,995
and then you have to evaluate the string to get 12.

110
00:05:14,995 --> 00:05:17,371
So if you try to do this in Python 3 and it broke,

111
00:05:17,371 --> 00:05:18,687
that is the reason why,

112
00:05:18,687 --> 00:05:22,010
you have to put an eval() around it.
