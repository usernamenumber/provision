1
00:00:00,302 --> 00:00:04,177
In this video, I want to introduce you to the idea of a list,

2
00:00:04,531 --> 00:00:06,327
of a list in python.

3
00:00:06,496 --> 00:00:09,154
It is one of the most powerful data structures in Python,

4
00:00:09,231 --> 00:00:12,116
and it really is just a sequence of a bunch of other stuff.

5
00:00:12,193 --> 00:00:14,679
So a list in Python would look something like this:

6
00:00:14,741 --> 00:00:16,986
So this would be a list of integers,

7
00:00:17,063 --> 00:00:23,594
Maybe 1 , -7, 0, 0, 5 and 10

8
00:00:23,663 --> 00:00:26,661
And we can have some variable refer to it,

9
00:00:26,723 --> 00:00:29,505
so that we can refer back to it later on in the program,

10
00:00:29,551 --> 00:00:32,713
so maybe we say a is equal to all of this.

11
00:00:32,806 --> 00:00:34,490
And if we run this in the interpreter,

12
00:00:34,552 --> 00:00:35,898
or if we run this in a program,

13
00:00:35,929 --> 00:00:38,121
now we can refer to the elements of a,

14
00:00:38,198 --> 00:00:40,944
and you do that by, so let's say I have a

15
00:00:41,052 --> 00:00:43,829
(let me write in the same pink color)

16
00:00:43,859 --> 00:00:47,407
You do that by referring to the index of the element inside of the list.

17
00:00:47,453 --> 00:00:50,828
So, if I say a and then in brackets, I put a zero here.

18
00:00:50,828 --> 00:00:54,118
This says the 0th element in a,

19
00:00:54,179 --> 00:00:55,381
0th elment...

20
00:00:55,427 --> 00:00:57,090
and the general convention in Python,

21
00:00:57,090 --> 00:00:59,013
and this is true of most programming languages,

22
00:00:59,076 --> 00:01:03,938
is what some people would consider the first item in an array, or inside of a list

23
00:01:03,984 --> 00:01:09,378
you would call it the 0th item, or the index of this item right here, is 0.

24
00:01:09,440 --> 00:01:11,054
So, if you were to type this in an interpreter,

25
00:01:11,054 --> 00:01:12,452
or if you were to type it in a program,

26
00:01:12,514 --> 00:01:16,758
it would evaluate as this item right over here.

27
00:01:16,819 --> 00:01:19,718
It would be this item, right over there.

28
00:01:19,795 --> 00:01:21,371
And let me do another example:

29
00:01:21,402 --> 00:01:23,146
If I were say a of..

30
00:01:23,192 --> 00:01:23,982
I shouldn't say a of...

31
00:01:24,044 --> 00:01:26,963
If I were to say the second element...

32
00:01:27,040 --> 00:01:28,970
in the second element in a

33
00:01:29,032 --> 00:01:32,485
this would be 0th element, first element, second element.. It would be

34
00:01:32,485 --> 00:01:35,351
this zero, right over there.

35
00:01:35,397 --> 00:01:37,777
So, that's how you refer to elements in a list.

36
00:01:37,884 --> 00:01:40,615
you can maybe already imagine doing interesting things with that.

37
00:01:40,676 --> 00:01:41,844
But, what is really cool with lists ...

38
00:01:41,906 --> 00:01:44,606
is that they don't have to all be the same data type.

39
00:01:44,675 --> 00:01:46,166
They could be all integers,

40
00:01:46,259 --> 00:01:47,287
or all floats...

41
00:01:47,333 --> 00:01:48,732
or all strings...

42
00:01:48,809 --> 00:01:50,192
but you could mix it up.

43
00:01:50,269 --> 00:01:51,897
So you could... you could...

44
00:01:51,974 --> 00:01:54,032
Actually, You could take a right over here,

45
00:01:54,094 --> 00:01:56,889
and you could redefine one of the elements

46
00:01:56,935 --> 00:01:58,413
so you could say...

47
00:01:58,521 --> 00:02:00,513
you could say a.....

48
00:02:00,590 --> 00:02:02,906
you could say let's reset......

49
00:02:02,990 --> 00:02:04,690
(do it in that same pink color)

50
00:02:04,813 --> 00:02:08,068
Let's reset the.......the...

51
00:02:08,068 --> 00:02:08,645
(I don't know...)

52
00:02:08,706 --> 00:02:10,824
let's say the fourth element..

53
00:02:10,896 --> 00:02:12,932
Let's reset the fourth element in a

54
00:02:12,993 --> 00:02:14,732
to be equal to...

55
00:02:14,732 --> 00:02:17,979
to be equal to.."this text"

56
00:02:18,025 --> 00:02:20,256
So literally "this text".

57
00:02:20,916 --> 00:02:22,777
Literally "this text"

58
00:02:22,955 --> 00:02:24,071
and so If you did that..

59
00:02:24,117 --> 00:02:26,343
if you set the fourth element be "this text"

60
00:02:26,420 --> 00:02:29,049
and then you and your program say print..

61
00:02:29,049 --> 00:02:31,998
print a..print a

62
00:02:31,998 --> 00:02:35,376
then a... would look like this.

63
00:02:35,422 --> 00:02:37,434
The 0th element wouldn't change.

64
00:02:37,480 --> 00:02:38,396
Still be 1

65
00:02:38,458 --> 00:02:40,460
The first element will stll be -7

66
00:02:40,521 --> 00:02:44,078
The...the...so this is the 0 first..this...this...this..

67
00:02:44,124 --> 00:02:47,077
This two index element would still be 0

68
00:02:47,138 --> 00:02:48,879
This will be the third.

69
00:02:48,879 --> 00:02:50,369
So this is 0th index.

70
00:02:50,415 --> 00:02:52,638
First, second, third, fourth.

71
00:02:52,715 --> 00:02:54,333
to replace the fourth element.

72
00:02:54,379 --> 00:02:56,448
So the fourth element will now be "this text"

73
00:02:56,448 --> 00:03:01,069
It will now be...this....will now be "this text"

74
00:03:01,315 --> 00:03:04,925
...the second...we wanna try out with Python intrepreter

75
00:03:04,987 --> 00:03:07,350
and the last element will still be.....

76
00:03:07,427 --> 00:03:09,649
The last element will still be 10.

77
00:03:09,726 --> 00:03:12,574
and this will completely valid to do in Python.

78
00:03:12,590 --> 00:03:13,953
You can mix data type.

79
00:03:14,015 --> 00:03:17,365
In fact, you could even...if you..after..after you did this,

80
00:03:17,426 --> 00:03:20,038
you could even say..that..a

81
00:03:20,146 --> 00:03:23,409
Let's redefine the 0th element of a..

82
00:03:23,471 --> 00:03:25,587
to be another list.

83
00:03:25,649 --> 00:03:28,984
To be the list -1, -2.

84
00:03:29,045 --> 00:03:32,733
and if you did this, then this 0th element over here,

85
00:03:32,733 --> 00:03:36,133
will in the list, the 0th element will now refer to this thing.

86
00:03:36,133 --> 00:03:38,000
So the list would now look like this.

87
00:03:38,000 --> 00:03:41,600
So the first element or the 0th element I should say will be this thing.

88
00:03:41,600 --> 00:03:43,600
Negative 1, negative 2.

89
00:03:43,600 --> 00:03:50,554
And then you'd have you're negative seven, zero, zero, this text

90
00:03:50,554 --> 00:03:53,600
and then you'll have your 10, just like that.

91
00:03:53,600 --> 00:03:59,933
So you define it this way and literally replaces or the 0th element will now refer to this data structure

92
00:03:59,933 --> 00:04:04,133
over here and you could maybe already imagine useful ways to use this in programs

93
00:04:04,133 --> 00:04:06,800
and if you can't don't worry about it. We'll see useful ways.

94
00:04:06,800 --> 00:04:10,000
Now there is one thing I want to make very clear here

95
00:04:10,000 --> 00:04:14,267
is that, when I... Let's say that I have... Let me define some new...

96
00:04:14,267 --> 00:04:19,333
Let's say that I have some list that I have the variable b referred to

97
00:04:19,333 --> 00:04:25,800
and let's say I make this list: 7, 13, 15.

98
00:04:25,800 --> 00:04:27,267
So that's my list.

99
00:04:27,267 --> 00:04:31,600
And let's say that I... the next line in my program or maybe using the python interpetrator.

100
00:04:31,600 --> 00:04:35,000
I say that c is equal to b.

101
00:04:35,000 --> 00:04:38,800
And sometimes you might be tempted to do this is, hey I want to have a copy of b.

102
00:04:38,800 --> 00:04:43,933
And what I wanna make clear is that this point, c and b are actually pointing at the same thing.

103
00:04:43,933 --> 00:04:47,000
They are referring to the same thing, so if you think about what's happening.

104
00:04:47,000 --> 00:04:52,667
There are some entity in memory that looks like this: 7, 13, 15.

105
00:04:52,667 --> 00:04:58,067
And when you execute this, when you execute this first line over here that says

106
00:04:58,067 --> 00:05:00,333
that look, b is going to definetly refer to that.

107
00:05:00,333 --> 00:05:05,733
If the variable b refers to this entity and when you say c is equal to b,

108
00:05:05,733 --> 00:05:11,200
this is actually saying that c is going to refer to the same thing that b is referring to.

109
00:05:11,200 --> 00:05:17,133
So c is also going to refer to this exact same thing.

110
00:05:17,133 --> 00:05:21,733
C is not a copy of it, we didn't make a copy of it and make c refer to that.

111
00:05:21,733 --> 00:05:27,267
And what's relevant here is if we now change c we are also going to change or if we change

112
00:05:27,267 --> 00:05:30,600
what c is refering to we'll also change what b is referring to.

113
00:05:30,600 --> 00:05:33,867
And I'll show you that in a second with the interpetator, but let me show you what I'm talking about.

114
00:05:33,867 --> 00:05:43,067
So this point, I say that c...If I... the next line I say that c, the 0th element in c needs to be equal

115
00:05:43,067 --> 00:05:44,175
to 1.

116
00:05:44,175 --> 00:05:49,052
And if I were to tell you then print c you would get.

117
00:05:49,052 --> 00:05:54,400
You would get 1, 13 and 15.

118
00:05:54,400 --> 00:05:59,467
But if you were to say print b you would also get 1, 13 and 15.

119
00:05:59,467 --> 00:06:03,600
And that's because this call right over here or this statement right over here

120
00:06:03,600 --> 00:06:09,467
it changes what the 0th element in this list refers to.

121
00:06:09,467 --> 00:06:12,333
So it won't refer to 7 anymore it will refer to 1.

122
00:06:12,333 --> 00:06:19,400
So now if you say b of 0, this will be equal to 1 and not 7.

123
00:06:19,400 --> 00:06:24,400
So you might say:" Well Sal okay, I understand that, so if set a variable equal to another variable

124
00:06:24,400 --> 00:06:28,267
that refers to a list they are actually refering to the same list and if I change one of the items in

125
00:06:28,267 --> 00:06:31,267
the list that this is referring to is actually changing what this is referring to.

126
00:06:31,267 --> 00:06:33,467
So how could I copy lists?"

127
00:06:33,467 --> 00:06:35,000
How could I actually copy it.

128
00:06:35,000 --> 00:06:42,933
And there you use the notion that can actually and I'll write right over here if you actually want to

129
00:06:42,933 --> 00:06:45,000
copy things you would do this.

130
00:06:45,000 --> 00:06:50,533
You would write c is equal to b and this might look a little funny for you

131
00:06:50,533 --> 00:06:56,267
but you put this colon sign over here and what this does is it tells you copy everything in b

132
00:06:56,267 --> 00:06:58,933
from the beginning of b all the way to the end of the b.

133
00:06:58,933 --> 00:07:12,159
So you could write c is equal to b and then you could say 0 all the way up to but not including

134
00:07:12,159 --> 00:07:13,800
the second element.

135
00:07:13,800 --> 00:07:23,800
So this right over here, this would create a new list that is the 0th and only the first element.

136
00:07:23,800 --> 00:07:25,467
It won't include the second element.

137
00:07:25,467 --> 00:07:30,600
So in this case, what you do... So this one right over here would create a new list that looks like this.

138
00:07:30,600 --> 00:07:36,933
That creates... That looks like... If we assume we haven't changed b and if we assume this was

139
00:07:36,933 --> 00:07:42,467
our definition of b, then it will create a new list that looks like this and c will now refer to this

140
00:07:42,467 --> 00:07:43,800
new list.

141
00:07:43,800 --> 00:07:46,600
So c will now refer to this new list.

142
00:07:46,600 --> 00:07:51,533
So it created a copy of the first two elements, 0th element and first, not the seconth element.

143
00:07:51,533 --> 00:07:54,067
You would have to put 3 here if you wanted the second element,

144
00:07:54,067 --> 00:07:56,867
so up to but not including the second element.

145
00:07:56,867 --> 00:07:59,200
If you wanted all of the elements to copy you would do this.

146
00:07:59,200 --> 00:08:02,267
So this is simply saying from the beginning all the way to the end.

147
00:08:02,267 --> 00:08:06,000
So it would create... It would create a separate list...

148
00:08:06,000 --> 00:08:10,867
It would create a separate list that looks just like b, but it is a separate one.

149
00:08:10,867 --> 00:08:16,533
And then c could refer to that and now if you change c you won't change b.

150
00:08:16,533 --> 00:08:21,533
So enough of just talking about it, let's actually play with it on our interpetrator.

151
00:08:21,533 --> 00:08:23,667
Cuz this is the fun stuff right over here.

152
00:08:23,667 --> 00:08:30,333
So let's say that we have... Let's say that... Let me get rid some of this text that I have here

153
00:08:30,333 --> 00:08:32,267
So you don't get confused.

154
00:08:32,267 --> 00:08:34,000
So let's say I define some list.

155
00:08:34,000 --> 00:08:46,800
A is equal to 1, 2 -- I'll write this way -- 1, 2, negative 7, 9, 11.

156
00:08:46,800 --> 00:08:49,533
So I've defined and could even verify that.

157
00:08:49,533 --> 00:08:51,467
Print a, you can see it right there.

158
00:08:51,467 --> 00:08:53,600
We can change one of the elements in a.

159
00:08:53,600 --> 00:08:59,600
We can say... Let's change the first element and remember, when we say we have an index 1

160
00:08:59,600 --> 00:09:01,733
we are not talking about this one here this is the 0th element.

161
00:09:01,733 --> 00:09:03,467
So we are changing this one right over here.

162
00:09:03,467 --> 00:09:05,600
So let's change that.

163
00:09:05,600 --> 00:09:08,933
Let's just for fun... Let's change that to a string.

164
00:09:08,933 --> 00:09:15,067
So "Sal's String*.

165
00:09:15,067 --> 00:09:18,533
And now let's see what a looks like. Print a.

166
00:09:18,533 --> 00:09:24,800
So notice, it took this, this is the index one, this is the first, 0th element, 1st element.

167
00:09:24,800 --> 00:09:28,600
It changed the first element to "Sal's String" and we see it right there.

168
00:09:28,600 --> 00:09:30,333
Now let's do something interesting.

169
00:09:30,333 --> 00:09:32,733
Let's set b equal to a.

170
00:09:32,733 --> 00:09:38,800
And let's print... Let's print b. So it looks like a.

171
00:09:38,800 --> 00:09:40,133
And let me do something else.

172
00:09:40,133 --> 00:09:48,467
Let me... Let c equal to a and then do what I talked about, so let me make c equal to a copy of a.

173
00:09:48,467 --> 00:09:51,533
So let's print c. Print c.

174
00:09:51,533 --> 00:09:55,333
So b and c looked the same, but they are two different things.

175
00:09:55,333 --> 00:10:00,133
C is a copy of a or c is a copy of the thing that a is referring to.

176
00:10:00,133 --> 00:10:04,533
B is the thing that a is referring to and to see that, let's change the first element

177
00:10:04,533 --> 00:10:06,467
of both b and c.

178
00:10:06,467 --> 00:10:08,467
so if you change the first element of b.

179
00:10:08,467 --> 00:10:14,000
So b of... the 0th element in b. Let's just make that, I don't know. Let's make that equal to...

180
00:10:14,000 --> 00:10:18,498
Let's make it equal to 0.

181
00:10:18,498 --> 00:10:22,467
Now if we print b you see the first element is 0.

182
00:10:22,467 --> 00:10:27,133
And what you'll also see is that if you print a, the first element will be 0 now.

183
00:10:27,133 --> 00:10:29,800
Cuz they were referring to the same thing.

184
00:10:29,800 --> 00:10:34,600
So it said, whatever b is referring to make it, the very 0th element, make that equal to 0.

185
00:10:34,600 --> 00:10:38,267
Well a was referring to the same thing so it also became 0.

186
00:10:38,267 --> 00:10:42,067
But c is referring to a copy so c should not have changed.

187
00:10:42,067 --> 00:10:47,333
C did not change. The 0th element here did not change a bit.

188
00:10:47,333 --> 00:10:51,200
So I'll leave you there. Lists are super powerful, there's a ton of functions you can do

189
00:10:51,200 --> 00:10:53,533
with lists, In fact, I'll expose you to a few right here.

190
00:10:53,533 --> 00:10:56,867
So that is a, you can add elements to a.

191
00:10:56,867 --> 00:11:01,333
So you could say a dot append and you can add something to the end of a.

192
00:11:01,333 --> 00:11:09,800
So you could add "new element" and if you do that it should add it to the end of a.

193
00:11:09,800 --> 00:11:11,467
So let's look at a.

194
00:11:11,467 --> 00:11:12,600
It added that element.

195
00:11:12,600 --> 00:11:14,867
Well b is referring to the same thing so let's see what b looks like.

196
00:11:14,867 --> 00:11:16,200
It has a new element.

197
00:11:16,200 --> 00:11:20,200
C is referring to a copy of the old a, so let's see what that looks like.

198
00:11:20,200 --> 00:11:23,267
Didn't add it there, cuz it didn't add it to the copy.

199
00:11:23,267 --> 00:11:26,933
It added only to what a was referring to which is the same thing b is referring to

200
00:11:26,933 --> 00:11:30,800
and there is a ton of useful functions that we'll explore them as we do more and more

201
00:11:30,800 --> 00:11:33,467
programs, more more example problems,

202
00:11:33,467 --> 00:11:38,467
but there is a bunch of useful functions or methods that lists have to be able to manipulate them

203
00:11:38,467 --> 99:59:59,999
and change them in different ways.
