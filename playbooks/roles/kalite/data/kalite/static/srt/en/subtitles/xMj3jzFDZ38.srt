1
00:00:01,753 --> 00:00:05,060
Our goal is to define a series of instructions

2
00:00:05,060 --> 00:00:08,580
which can prove whether some input integer

3
00:00:08,580 --> 00:00:13,130
is composite -- or else identify it as prime --

4
00:00:13,130 --> 00:00:16,240
with some very high degree of accuracy,

5
00:00:16,240 --> 00:00:18,312
which we can define.

6
00:00:18,312 --> 00:00:21,609
And it must be efficient to do so,

7
00:00:21,609 --> 00:00:25,439
meaning it should be fast to calculate on any machine,

8
00:00:25,439 --> 00:00:27,601
and even if the input size grows --

9
00:00:27,601 --> 00:00:29,888
which is our input integer n --

10
00:00:29,888 --> 00:00:32,449
it should still be fast.

11
00:00:32,449 --> 00:00:36,070
And so far, we've learned that, at the lowest level,

12
00:00:36,070 --> 00:00:41,230
this requires some known pattern that all primes follow

13
00:00:41,230 --> 00:00:44,533
and very few composites follow.

14
00:00:44,533 --> 00:00:45,885
However, in the previous video,

15
00:00:45,885 --> 00:00:49,816
we did a visual demonstration of Fermat's little theorem.

16
00:00:49,816 --> 00:00:53,629
And it provides us with a very interesting rule.

17
00:00:53,629 --> 00:00:56,358
Given some prime number, 'p,'

18
00:00:56,358 --> 00:00:58,569
and some other integer 'a,'

19
00:00:58,569 --> 00:01:00,858
which is just less than p,

20
00:01:00,858 --> 00:01:08,120
we know, now, that p divides a to the power of p minus a.

21
00:01:09,688 --> 00:01:14,492
We write this as a^p = a mod p.

22
00:01:14,492 --> 00:01:18,136
And that's the way you normally see it.

23
00:01:18,951 --> 00:01:23,148
Now because a and p share no common factors --

24
00:01:23,148 --> 00:01:26,340
since p is a prime -- we can use the cancellation law --

25
00:01:26,340 --> 00:01:28,720
and you'll sometimes see this written as

26
00:01:28,720 --> 00:01:33,352
a^(p -1) = 1 mod p.

27
00:01:33,352 --> 00:01:36,470
And remember, we can only do this because

28
00:01:36,470 --> 00:01:41,490
the greatest common divisor of a and p equals 1.

29
00:01:41,490 --> 00:01:43,850
And here, I've just set up a demo, so we can, at first,

30
00:01:43,850 --> 00:01:46,966
just see this equation in action, and get comfortable with it.

31
00:01:46,966 --> 00:01:52,980
Notice now, if I input prime for p, the output is always 1,

32
00:01:52,980 --> 00:01:55,333
no matter what a I choose.

33
00:01:55,333 --> 00:01:59,290
If we input a composite number for P,

34
00:01:59,290 --> 00:02:02,735
we see that it usually isn't 1.

35
00:02:02,735 --> 00:02:07,314
And any time this equation outputs something that isn't 1,

36
00:02:07,314 --> 00:02:09,910
we have a 'composite witness.'

37
00:02:09,910 --> 00:02:14,840
This is now proof that the p we chose cannot be prime.

38
00:02:14,840 --> 00:02:17,210
And that's the essence of this test.

39
00:02:17,210 --> 00:02:20,750
And before going any deeper, let's just step back

40
00:02:20,750 --> 00:02:23,990
and construct the framework for this test,

41
00:02:23,990 --> 00:02:26,370
using this pattern I just showed you.

42
00:02:26,370 --> 00:02:30,200
So our test [states] we are provided with some integer --

43
00:02:30,200 --> 00:02:32,333
let's call it 'p' -- as input.

44
00:02:32,333 --> 00:02:35,770
Next, we generate a random integer, 'a,'

45
00:02:35,770 --> 00:02:38,695
which is less than p.

46
00:02:38,695 --> 00:02:39,680
And now we can ask,

47
00:02:39,680 --> 00:02:43,923
"Is the greatest common divisor of a and p 1?"

48
00:02:43,923 --> 00:02:46,072
If not -- if the greatest common divisor

49
00:02:46,072 --> 00:02:48,440
of a and p is greater than 1,

50
00:02:48,440 --> 00:02:50,730
then they share a common factor,

51
00:02:50,730 --> 00:02:53,235
and we've proven that p is composite --

52
00:02:53,235 --> 00:02:54,451
because a factor exists.

53
00:02:54,451 --> 00:02:55,840
And we can halt and exit.

54
00:02:55,840 --> 00:02:58,460
And our algorithm will output 'composite.'

55
00:02:58,460 --> 00:03:03,300
However, if 'yes,' and we can ask the key question,

56
00:03:03,300 --> 00:03:10,822
"Does a to the power of p minus 1 mod p equal 1?"

57
00:03:10,822 --> 00:03:15,626
If not, we have a witness that p is composite.

58
00:03:15,626 --> 00:03:19,579
We can halt and say, "Yeah. We're done. p is composite."

59
00:03:19,579 --> 00:03:23,069
Otherwise, if 'yes' -- if our equation outputs 1 --

60
00:03:23,069 --> 00:03:26,462
then it should be prime, right?

61
00:03:26,462 --> 00:03:29,470
I coded up this series of instructions and

62
00:03:29,470 --> 00:03:32,010
on the left-hand side we have Fermat's test,

63
00:03:32,010 --> 00:03:36,164
and on the right, I just have it in existing trial division test.

64
00:03:36,164 --> 00:03:37,606
And that's there because

65
00:03:37,606 --> 00:03:40,036
we know that that test is always correct.

66
00:03:40,036 --> 00:03:43,883
And, just at first glance, it seems like it's working.

67
00:03:43,883 --> 00:03:46,240
However, I found a problem.

68
00:03:46,240 --> 00:03:50,539
I hit the number 511, and now the Fermat's test

69
00:03:50,539 --> 00:03:52,225
is saying it's prime,

70
00:03:52,225 --> 00:03:56,590
and the trial division test is telling me that it's composite.

71
00:03:56,590 --> 00:04:00,481
511 seems prime from the test's perspective.

72
00:04:00,481 --> 00:04:02,222
But it's not.

73
00:04:02,222 --> 00:04:04,427
Now let's just return back to our equation,

74
00:04:04,427 --> 00:04:05,997
and see what happened.

75
00:04:05,997 --> 00:04:09,480
Well, this is an example of what we call a 'pseudo-prime.'

76
00:04:09,480 --> 00:04:12,450
It's a composite number.

77
00:04:12,450 --> 00:04:18,341
But there are certain a's we can choose that <i>will</i> output a 1.

78
00:04:18,341 --> 00:04:19,832
That's incorrect again.

79
00:04:19,832 --> 00:04:23,595
So these a's which result in a composite number --

80
00:04:23,595 --> 00:04:27,290
outputting a 1-- we can call 'fools.'

81
00:04:27,290 --> 00:04:31,623
Because they're fooling us into thinking the number is prime.

82
00:04:31,623 --> 00:04:34,672
But notice that if we choose different a's,

83
00:04:34,672 --> 00:04:38,052
we seem to find many composite witnesses

84
00:04:38,052 --> 00:04:40,778
instead of fools.

85
00:04:40,778 --> 00:04:43,778
So, we could maybe just step back.

86
00:04:43,778 --> 00:04:46,106
And let's apply the same logic we used

87
00:04:46,106 --> 00:04:49,125
in the divisibility test, where we simply

88
00:04:49,125 --> 00:04:51,419
repeat the experiment a few times,

89
00:04:51,419 --> 00:04:54,319
and generate a new random a each time.

90
00:04:54,319 --> 00:04:57,120
And hopefully, we won't pick a fool each time.

91
00:04:57,120 --> 00:05:01,439
Now it's been proven that the number of fools

92
00:05:01,439 --> 00:05:05,363
must divide the total size of the group we select from.

93
00:05:05,363 --> 00:05:10,539
Which means, at most, half of the choices

94
00:05:10,539 --> 00:05:15,948
or half of the elements in this pool, could be fools.

95
00:05:15,948 --> 00:05:19,349
So, since a is chosen randomly,

96
00:05:19,349 --> 00:05:22,320
the chance of finding a composite witness --

97
00:05:22,320 --> 00:05:26,479
which is what we want -- is at least one half.

98
00:05:27,824 --> 00:05:30,794
After t iterations,

99
00:05:30,794 --> 00:05:34,151
the probability that no witness will be found

100
00:05:34,151 --> 00:05:35,930
with a composite number

101
00:05:35,930 --> 00:05:41,430
is at most 1/(2^t).

102
00:05:41,430 --> 00:05:44,300
So after 20 trials, the probability of mistakenly

103
00:05:44,300 --> 00:05:49,464
outputting a prime is just over one in a million.

104
00:05:49,464 --> 00:05:52,589
So that's the case we just keep getting really unlucky

105
00:05:52,589 --> 00:05:54,680
in generating random a's.

106
00:05:54,680 --> 00:05:57,219
And every time, we choose a fool.

107
00:05:57,219 --> 00:05:58,472
If you can let that sink in,

108
00:05:58,472 --> 00:06:01,550
that's really powerful to understand.

109
00:06:01,550 --> 00:06:03,399
And here now, we can see our test

110
00:06:03,399 --> 00:06:06,949
in action, with the increased number of trials,

111
00:06:06,949 --> 00:06:09,804
it seems to be working perfectly.

112
00:06:12,847 --> 00:06:16,017
And, notice that in the worst case --

113
00:06:16,017 --> 00:06:17,104
which we know is when

114
00:06:17,104 --> 00:06:19,087
we provide our algorithm with a prime --

115
00:06:19,087 --> 00:06:22,902
it's going to do the maximum amount of work.

116
00:06:22,902 --> 00:06:27,210
The Fermat test is much more efficient then trial division --

117
00:06:27,210 --> 00:06:31,279
especially because the number of steps

118
00:06:31,279 --> 00:06:33,885
doesn't scale with the input.

119
00:06:33,885 --> 00:06:36,369
And that's a key distinction.

120
00:06:36,369 --> 00:06:39,900
We set the number of trials, and that's it.

121
00:06:39,900 --> 00:06:41,710
We never have to worry about our algorithm

122
00:06:41,710 --> 00:06:43,680
running millions and millions of iterations

123
00:06:43,680 --> 00:06:45,265
as we did before.

124
00:06:46,395 --> 00:06:49,829
So, I mean, this is quintessentially applied math.

125
00:06:49,829 --> 00:06:52,669
We are taking a pattern someone discovered,

126
00:06:52,669 --> 00:06:55,800
and we're saving an immense amount of

127
00:06:55,800 --> 00:06:57,735
computational cycles.

128
00:06:57,735 --> 00:07:05,059
However, there is one tiny flaw -- or error -- in this system.

129
00:07:05,805 --> 00:07:07,065
Can you find it?
