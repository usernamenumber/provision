1
00:00:00,488 --> 00:00:02,800
In the last few videos we wrote a nice little program here

2
00:00:02,800 --> 00:00:05,662
that asks the user for some type of input

3
00:00:05,662 --> 00:00:07,966
and then computes the factorial of that number

4
00:00:07,966 --> 00:00:09,564
and then prints it out.

5
00:00:09,564 --> 00:00:12,772
And thats nice, but you could imagine a world where

6
00:00:12,772 --> 00:00:15,344
you would want to calculate the factorial in multiple places

7
00:00:15,344 --> 00:00:16,934
or in multiple different programs

8
00:00:16,934 --> 00:00:18,400
or in the same program you want to calculate

9
00:00:18,400 --> 00:00:20,557
the factorial multiple times.

10
00:00:20,557 --> 00:00:22,429
And you don't want to write this code

11
00:00:22,429 --> 00:00:24,441
over and over again every time

12
00:00:24,441 --> 00:00:26,129
you want to calculate the factorial.

13
00:00:26,129 --> 00:00:28,067
So what I'm gonna to in this video,

14
00:00:28,067 --> 00:00:31,526
is define a function that calculates the factorial

15
00:00:31,526 --> 00:00:33,000
and then we could use that function

16
00:00:33,000 --> 00:00:35,554
ever time we want to calculate the factorial.

17
00:00:35,554 --> 00:00:36,866
So essentially what this function is going to do,

18
00:00:36,866 --> 00:00:37,933
is going to put all this code,

19
00:00:37,933 --> 00:00:39,413
all of this code right here,

20
00:00:39,413 --> 00:00:41,169
in one place and then any other

21
00:00:41,169 --> 00:00:43,105
program that i want to calculate the factorial,

22
00:00:43,105 --> 00:00:44,979
i can just recall that code.

23
00:00:44,979 --> 00:00:46,133
I don't have to rewrite it.

24
00:00:46,133 --> 00:00:48,029
So let me just show you what I'm talking about.

25
00:00:48,029 --> 00:00:50,489
So I'm going to define a function

26
00:00:50,489 --> 00:00:52,933
and the keyword in Python,

27
00:00:52,933 --> 00:00:53,987
so it is kind of a special word

28
00:00:53,987 --> 00:00:55,133
that tells the interpret that something

29
00:00:55,133 --> 00:00:56,933
special is about to happen.

30
00:00:56,933 --> 00:01:00,048
The keyword in Python for defining a function is "def".

31
00:01:00,048 --> 00:01:01,893
So I'm going to define a function,

32
00:01:01,893 --> 00:01:03,322
I'm going to call it the factorial function.

33
00:01:03,322 --> 00:01:05,643
And it tends to be a good idea

34
00:01:05,643 --> 00:01:08,733
to name things in indicative of what they actually do.

35
00:01:08,733 --> 00:01:11,650
Sometimes beginning programmers have a habit of

36
00:01:11,650 --> 00:01:13,628
naming things like "x245"

37
00:01:13,628 --> 00:01:15,193
and someone who comes in later

38
00:01:15,193 --> 00:01:17,561
will have no clue what variable

39
00:01:17,561 --> 00:01:18,913
or that function is all about.

40
00:01:18,913 --> 00:01:20,567
So you definitely somehow name it

41
00:01:20,567 --> 00:01:22,067
so it gives an idea what is supposed to do.

42
00:01:22,067 --> 00:01:24,744
My function is called factorial

43
00:01:24,744 --> 00:01:28,467
and the user when they call factorial,

44
00:01:28,467 --> 00:01:29,972
they need to tell factorial

45
00:01:29,972 --> 00:01:31,815
what number I'm going to take the factorial of.

46
00:01:31,815 --> 00:01:36,082
So they gonna pass it in argument called "number".

47
00:01:36,082 --> 00:01:38,805
And if these words look a little confusing

48
00:01:38,805 --> 00:01:40,635
i will explain them in detail in a second

49
00:01:40,635 --> 00:01:42,964
but you can just hopefully the more you see this

50
00:01:42,964 --> 00:01:46,585
the more familiar you will get with these ideas.

51
00:01:46,585 --> 00:01:49,690
And so they gonna pass it number

52
00:01:49,690 --> 00:01:52,458
and I'm just going to have to return back

53
00:01:52,458 --> 00:01:54,149
to the calling program

54
00:01:54,149 --> 00:01:55,441
and I actually shouldn't have said

55
00:01:55,441 --> 00:01:56,733
that the user is going to pass the number,

56
00:01:56,733 --> 00:01:59,566
the calling program is going to pass the number

57
00:01:59,566 --> 00:02:02,400
and I need to return back the factorial of that number

58
00:02:02,400 --> 00:02:04,150
to the calling program.

59
00:02:04,150 --> 00:02:05,622
So let me write this down as a comment actually.

60
00:02:05,622 --> 00:02:18,228
So returns the factorial of the argument "number".

61
00:02:18,350 --> 00:02:20,311
And sometimes you will hear the word parameter

62
00:02:20,311 --> 00:02:21,641
and sometimes you'll hear the word argument.

63
00:02:21,641 --> 00:02:23,800
When you are making a definition of a function,

64
00:02:23,800 --> 00:02:26,329
this is more formally called a parameter.

65
00:02:26,329 --> 00:02:28,130
"Number" is one of the parameters

66
00:02:28,130 --> 00:02:31,069
to the factorial function.

67
00:02:31,069 --> 00:02:34,337
The actual number that someone else passes to it,

68
00:02:34,337 --> 00:02:37,590
so let's say someone calls factorial with a "3" here,

69
00:02:37,590 --> 00:02:40,733
then more formally that 3 would be the argument.

70
00:02:40,733 --> 00:02:43,933
So returns the factorial of the argument "number".

71
00:02:43,933 --> 00:02:47,733
And this is the argument "number" right over here.

72
00:02:47,733 --> 00:02:51,067
I don't mean this just is like arbitrarily the word number

73
00:02:51,067 --> 00:02:53,639
I'm literally talking about this number over here.

74
00:02:53,639 --> 00:02:56,054
Maybe I will say the argument "number".

75
00:02:56,054 --> 00:02:57,876
Maybe I will put it in quotes to make it clear

76
00:02:57,876 --> 00:02:59,452
that this is the argument,

77
00:02:59,452 --> 00:03:00,995
I'm not talking about any general number.

78
00:03:00,995 --> 00:03:01,904
Let's define it.

79
00:03:01,904 --> 00:03:05,320
So we are going to use the same code essentially,

80
00:03:05,320 --> 00:03:07,231
actually let me just copy and paste,

81
00:03:07,231 --> 00:03:10,056
let me just copy and past a lot of what i took over here.

82
00:03:10,056 --> 00:03:11,574
So I'm going to cut that out

83
00:03:11,574 --> 00:03:13,338
and I'm going to re-paste it over here

84
00:03:13,338 --> 00:03:15,826
but i have to be careful about my indentations

85
00:03:15,826 --> 00:03:18,975
cause indentations are how Python knows

86
00:03:18,975 --> 00:03:21,333
whats part of what, it knows how to interpret things.

87
00:03:21,333 --> 00:03:24,369
So everything that is part of this function definition

88
00:03:24,369 --> 00:03:27,205
has to be indented and we do it by four spaces.

89
00:03:27,241 --> 00:03:28,980
One, two, three, four.

90
00:03:28,980 --> 00:03:30,434
And this is another four.

91
00:03:30,434 --> 00:03:31,900
One, two, three, four.

92
00:03:31,900 --> 00:03:33,339
And this is part of the for-loop.

93
00:03:33,339 --> 00:03:35,138
One, two, three, four.

94
00:03:35,138 --> 00:03:36,456
And let's think about what we have so far.

95
00:03:36,456 --> 00:03:39,051
It is going to be passed some number,

96
00:03:39,051 --> 00:03:42,708
we define this variable "product" equals 1.

97
00:03:42,708 --> 00:03:45,464
And we will talk more about scoping of variables

98
00:03:45,464 --> 00:03:48,326
but this variable is only going to be useable

99
00:03:48,326 --> 00:03:50,435
within this factorial definition

100
00:03:50,435 --> 00:03:52,279
because the first time I define it right here

101
00:03:52,279 --> 00:03:54,123
is inside of this right here

102
00:03:54,123 --> 00:03:56,733
so we will go more into scoping of variables in the future.

103
00:03:56,733 --> 00:03:59,266
And then with the same logic we did before,

104
00:03:59,266 --> 00:04:01,800
"for i in range(number)",

105
00:04:01,800 --> 00:04:04,480
now we are not getting the number using the input function

106
00:04:04,480 --> 00:04:07,667
it is just being passed to the function,

107
00:04:07,667 --> 00:04:10,533
then "product" is equal to "product" x ("i"+1).

108
00:04:10,533 --> 00:04:12,366
Same logic as we had before.

109
00:04:12,366 --> 00:04:14,354
So after you go through this for-loop,

110
00:04:14,354 --> 00:04:16,040
after you go through it,

111
00:04:16,040 --> 00:04:18,158
you are essentially going to go through it "number" times.

112
00:04:18,158 --> 00:04:21,200
"Product" will have in it the factorial of "number".

113
00:04:21,200 --> 00:04:23,277
And instead of outputting it directly,

114
00:04:23,277 --> 00:04:25,000
what we wanna do is return,

115
00:04:25,000 --> 00:04:28,066
we are going to return it to the calling program

116
00:04:28,066 --> 00:04:30,090
and in the next video I'm going to diagram this out

117
00:04:30,090 --> 00:04:32,619
a little bit cleaner if this seems a little bit confusing to you.

118
00:04:32,673 --> 00:04:34,841
I'm going to return product.

119
00:04:34,841 --> 00:04:37,748
So it is essentially the exact same code as we had before

120
00:04:37,748 --> 00:04:40,559
but we have packaged it inside of a function,

121
00:04:40,559 --> 00:04:41,656
we have defined a function.

122
00:04:41,656 --> 00:04:44,235
It takes in, it has a parameter called a "number",

123
00:04:44,235 --> 00:04:47,506
if you want a factorial of 3

124
00:04:47,506 --> 00:04:48,712
you try the factorial of 3

125
00:04:48,712 --> 00:04:50,256
and 3 would be the argument the thing

126
00:04:50,256 --> 00:04:52,800
that is being put in the place of the variable "number"

127
00:04:52,800 --> 00:04:54,559
or the thing that "number" is referring to.

128
00:04:54,559 --> 00:04:57,021
You define "product" is equal to 1

129
00:04:57,021 --> 00:04:59,775
and then you go "number" times.

130
00:04:59,775 --> 00:05:01,325
So "for i in range(number)",

131
00:05:01,325 --> 00:05:03,675
we have explained the logic of that in the previous video.

132
00:05:03,675 --> 00:05:05,317
Everytime you start with 1,

133
00:05:05,317 --> 00:05:07,667
then you do 1 x 1 is going to be 1,

134
00:05:07,667 --> 00:05:09,100
then "product" is going to be 1

135
00:05:09,100 --> 00:05:10,533
but then "i" is going to be 1.

136
00:05:10,533 --> 00:05:12,172
"i" starts off at zero,

137
00:05:12,172 --> 00:05:15,350
so it is going to be 1 x (0 + 1) gives you 1,

138
00:05:15,350 --> 00:05:19,457
then "i" is 2, so it's going to be 1 x 1,

139
00:05:19,457 --> 00:05:20,564
sorry, then "i" is 1

140
00:05:20,564 --> 00:05:23,990
it is going to be 1 x (1 + 1), which is 1 x 2,

141
00:05:23,990 --> 00:05:25,416
so it is going to be 2 then

142
00:05:25,416 --> 00:05:26,941
and it will incrementing that way

143
00:05:26,941 --> 00:05:28,821
and we explained it in detail in the last video.

144
00:05:28,821 --> 00:05:30,975
And then finally it is going to return that "product".

145
00:05:30,975 --> 00:05:35,302
So if we want to have the same exact behavior as before

146
00:05:35,302 --> 00:05:36,871
but now we are using this function.

147
00:05:36,871 --> 00:05:40,067
What we could do is, we could say,

148
00:05:40,067 --> 00:05:42,965
we still have the input, so this is our function definition

149
00:05:42,965 --> 00:05:44,790
but then along our main program,

150
00:05:44,790 --> 00:05:46,123
we have defined our function

151
00:05:46,123 --> 00:05:47,765
and now we could just say:

152
00:05:47,765 --> 00:05:49,924
"Look, from the user get a non-negative integer

153
00:05:49,924 --> 00:05:52,084
to take the factorial of"

154
00:05:52,084 --> 00:05:54,213
And let's put that into,

155
00:05:54,213 --> 00:05:56,589
lets call that a variable called "user_input".

156
00:05:56,589 --> 00:06:00,701
And then what I'm going to do

157
00:06:00,701 --> 00:06:03,090
is I'm going to define another variable

158
00:06:03,090 --> 00:06:07,914
to called "factorial<u>of</u>user_input"

159
00:06:07,914 --> 00:06:12,108
and now this is going to be interesting.

160
00:06:12,108 --> 00:06:14,397
I'm going to call this function up here,

161
00:06:14,397 --> 00:06:15,933
so this is going to be equal to

162
00:06:15,933 --> 00:06:19,832
factorial of whatever the user had input.

163
00:06:19,832 --> 00:06:23,016
So the factorial of "user_input",

164
00:06:23,016 --> 00:06:26,123
the factorial of this variable right over here.

165
00:06:26,123 --> 00:06:28,662
The factorial of user input.

166
00:06:28,662 --> 00:06:31,400
So now "factorial<u>of</u>user_input" will be storing,

167
00:06:31,400 --> 00:06:32,960
I guess we should say,

168
00:06:32,960 --> 00:06:34,644
it would be pointing to the actual answer

169
00:06:34,644 --> 00:06:36,086
and now we just have to print it out.

170
00:06:36,086 --> 00:06:43,522
So now we can print "factorial<u>of</u>user_input".

171
00:06:43,522 --> 00:06:45,884
They look like sentences

172
00:06:45,884 --> 00:06:47,242
but these are just variable names

173
00:06:47,242 --> 00:06:48,369
that I'm naming this way

174
00:06:48,369 --> 00:06:50,736
so you really now what's inside of those variables

175
00:06:50,736 --> 00:06:52,410
or what those variables are really pointing to.

176
00:06:52,410 --> 00:06:56,084
So "factorial<u>of</u>user_input".

177
00:06:56,084 --> 00:07:00,437
Now, you know the moment of truth

178
00:07:00,437 --> 00:07:03,067
is always saving the program and actually trying to run it.

179
00:07:03,067 --> 00:07:05,862
So lets try to run it right now and see what happens.

180
00:07:05,862 --> 00:07:09,755
Let's see what happens here.

181
00:07:09,755 --> 00:07:11,522
So at least nothing broke so far,

182
00:07:11,522 --> 00:07:12,428
so once again,

183
00:07:12,428 --> 00:07:14,504
so I want to be clear the program started here

184
00:07:14,504 --> 00:07:17,000
but up here all we did is defined this

185
00:07:17,000 --> 00:07:21,477
so it is not creating any interaction with the user,

186
00:07:21,477 --> 00:07:23,072
it is actually not processing anything just yet,

187
00:07:23,072 --> 00:07:26,021
so it just defines this function then it goes down here

188
00:07:26,021 --> 00:07:27,867
and says: "Okay, get some input form the user"

189
00:07:27,867 --> 00:07:30,067
and thats what we are doing right here.

190
00:07:30,067 --> 00:07:32,336
After we input some number here,

191
00:07:32,336 --> 00:07:35,867
then it's gonna actually call this function with that number

192
00:07:35,867 --> 00:07:37,331
that we put, the number that we put,

193
00:07:37,331 --> 00:07:39,533
is gonna go put in the "user_input"

194
00:07:39,533 --> 00:07:41,560
and then it is gonna call factorial

195
00:07:41,560 --> 00:07:43,586
with "user_input" as an argument.

196
00:07:43,586 --> 00:07:47,048
So let's try with the number 3.

197
00:07:49,294 --> 00:07:51,975
And it did not work!

198
00:07:51,975 --> 00:07:54,049
Oh, and I see why it did not work

199
00:07:54,049 --> 00:07:56,723
because I had this leftover from the previous program

200
00:07:56,723 --> 00:07:58,200
which actually makes no sense now.

201
00:07:58,200 --> 00:07:59,533
So let me get rid of that.

202
00:07:59,533 --> 00:08:01,954
It is a good lesson that seldom on the first

203
00:08:01,954 --> 00:08:03,452
try does something work perfectly.

204
00:08:03,452 --> 00:08:05,213
Let me try it again!

205
00:08:05,213 --> 00:08:06,181
That was just nonsense

206
00:08:06,181 --> 00:08:07,502
that i didn't even realize what was down there.

207
00:08:07,502 --> 00:08:08,698
So let me try it again.

208
00:08:08,698 --> 00:08:12,313
So 3 again.

209
00:08:12,313 --> 00:08:15,096
And it gave me a good answer.

210
00:08:15,096 --> 00:08:16,848
It gave me the factorial of 3

211
00:08:16,848 --> 00:08:18,723
and what's cool now is because

212
00:08:18,723 --> 00:08:20,236
now my python interpreter

213
00:08:20,236 --> 00:08:23,087
is assuming that this definition has been made

214
00:08:23,087 --> 00:08:25,600
I can now call the factorial straight from the interpreter,

215
00:08:25,600 --> 00:08:26,750
if I had another program

216
00:08:26,750 --> 00:08:27,855
I could call it multiple ways

217
00:08:27,855 --> 00:08:29,594
and now you should hopefully appreciate

218
00:08:29,594 --> 00:08:31,610
why it is cool that we made this function definition

219
00:08:31,610 --> 00:08:33,069
cause we can calculate,

220
00:08:33,069 --> 00:08:35,543
cause I've defined this function factorial,

221
00:08:35,543 --> 00:08:37,800
I can calculate the factorial of 4.

222
00:08:37,800 --> 00:08:39,400
It is 24.

223
00:08:39,400 --> 00:08:48,595
I can say that the factorial of 5 - the factorial of 3.

224
00:08:48,595 --> 00:08:50,477
114.

225
00:08:50,477 --> 00:08:52,820
I can take the factorial of 12

226
00:08:52,820 --> 00:08:53,995
and you can tell the computer,

227
00:08:53,995 --> 00:08:55,641
even though it is just interpreting all this,

228
00:08:55,641 --> 00:08:58,213
we will talk more interpreted vs compile code,

229
00:08:58,213 --> 00:09:00,000
it's incredibly fast.

230
00:09:00,000 --> 00:09:01,877
Faster then we can really even fathom.

231
00:09:01,877 --> 00:09:04,834
So this is the real power of a function,

232
00:09:04,834 --> 00:09:07,805
is that I don't have to rewrite code every time now,

233
00:09:07,805 --> 00:09:10,154
I can just call it with different arguments.

234
00:09:10,154 --> 00:09:12,892
So factorial of 2, I can do it every time,

235
00:09:12,892 --> 00:09:14,262
I don't have to rerun the program.

236
00:09:14,262 --> 00:09:16,854
And if I write other programs that use factorial,

237
00:09:16,854 --> 00:09:18,600
maybe I do something in combinatorics,

238
00:09:18,600 --> 00:09:21,630
I can just use this as a function,

239
00:09:21,630 --> 00:09:23,644
infact I don't even have to know

240
00:09:23,644 --> 00:09:27,637
what is going on inside the function.

241
00:09:27,637 --> 00:09:33,338
That's one of the other powerful aspects of functions is

242
00:09:33,338 --> 00:09:36,357
that let's say i write a bunch of programs that call,

243
00:09:36,357 --> 00:09:39,113
so i have this program right here that calls factorial.

244
00:09:39,113 --> 00:09:41,097
But let's say you come up with a better way of

245
00:09:41,097 --> 00:09:42,687
writing this right over here.

246
00:09:42,687 --> 00:09:44,628
As long as your program

247
00:09:44,628 --> 00:09:48,523
that does the same thing with different guts,

248
00:09:48,523 --> 00:09:50,145
the end user won't notice.

249
00:09:50,145 --> 00:09:51,456
So maybe you write a faster way

250
00:09:51,456 --> 00:09:52,844
or a simpler way of doing this.

251
00:09:52,844 --> 00:09:55,306
The way that uses less memory or less CPU power.

252
00:09:55,306 --> 00:09:57,554
Then you could just replace this later on

253
00:09:57,797 --> 00:09:59,810
and then any program that calls it,

254
00:09:59,810 --> 00:10:01,215
as long as it still works,

255
00:10:01,215 --> 00:10:02,464
it will work for that program

256
00:10:02,464 --> 00:10:04,267
and it will just work that much better.
