1
00:00:00,000 --> 00:00:02,021
What I want to do in this video is

2
00:00:02,021 --> 00:00:04,946
introduce you to a “for" loop.

3
00:00:04,946 --> 00:00:07,395
And we're going to do this by writing a little program

4
00:00:07,395 --> 00:00:10,374
that calculates the factorial of a number.

5
00:00:10,374 --> 00:00:11,838
In case you don't remember

6
00:00:11,838 --> 00:00:13,835
what a factorial of a number does,

7
00:00:13,835 --> 00:00:15,846
if I were to tell you what "1 factorial" [is],

8
00:00:15,846 --> 00:00:18,026
you normally write it

9
00:00:18,026 --> 00:00:20,685
as 1 and an exclamation mark ( 1! ) like that.

10
00:00:20,685 --> 00:00:23,698
It literally just means, well, that will just evaluate to 1.

11
00:00:23,698 --> 00:00:25,533
If you say "2 factorial" ( 2! ),

12
00:00:25,533 --> 00:00:28,843
that's going to be equal to 2 × 1.

13
00:00:28,843 --> 00:00:31,846
If you say "3 factorial" ( 3! ),

14
00:00:31,846 --> 00:00:38,106
that's going to be equal to 3 × 2 × 1,

15
00:00:38,106 --> 00:00:40,859
and which is going to be equal to 6.

16
00:00:40,859 --> 00:00:42,980
And so, if you have any number's factorial,

17
00:00:42,980 --> 00:00:44,026
it's going to be that number

18
00:00:44,026 --> 00:00:45,380
times one number less than that,

19
00:00:45,380 --> 00:00:46,553
times one number less than that,

20
00:00:46,553 --> 00:00:48,556
all the way down to 1.

21
00:00:48,556 --> 00:00:49,529
So, with that out of the way,

22
00:00:49,529 --> 00:00:52,374
let's implement our factorial program.

23
00:00:52,374 --> 00:00:53,989
And the way I'm going to do it is,

24
00:00:53,989 --> 00:00:55,848
it's going to take an input from the user,

25
00:00:55,848 --> 00:00:57,108
It's going to prompt the user

26
00:00:57,108 --> 00:00:59,552
to put a number that they want to take the factorial of

27
00:00:59,552 --> 00:01:01,858
and then it's going to calculate the factorial.

28
00:01:01,858 --> 00:01:03,058
And so what I'm going to do is,

29
00:01:03,058 --> 00:01:06,844
I'm going to use a function that Python provides for us.

30
00:01:06,844 --> 00:01:09,706
And I'm using Python 2 in this video.

31
00:01:09,706 --> 00:01:11,671
You'd have to do it slightly different —

32
00:01:11,671 --> 00:01:12,833
actually, I'll talk about that in a second —

33
00:01:12,833 --> 00:01:14,379
if you are using Python 3.

34
00:01:14,379 --> 00:01:15,364
Python 2 is

35
00:01:15,364 --> 00:01:18,039
what most implementations of Pythoner are built in

36
00:01:18,039 --> 00:01:19,546
at the time of this video.

37
00:01:19,546 --> 00:01:21,035
But there is a Python 3 out there

38
00:01:21,035 --> 00:01:23,386
that's kind of a newer version.

39
00:01:23,386 --> 00:01:26,999
I'll clarify that a bit in a future video.

40
00:01:26,999 --> 00:01:30,395
But anyway, we're going to take an input from the user,

41
00:01:30,395 --> 00:01:32,036
and we're going to prompt them with a message.

42
00:01:32,036 --> 00:01:33,013
We're going to say,

43
00:01:33,013 --> 00:01:44,375
"Enter a non-negative integer to take the factorial of:".

44
00:01:44,375 --> 00:01:45,334
And just so that

45
00:01:45,334 --> 00:01:47,540
we get to familiarize ourselves with functions and all.

46
00:01:47,540 --> 00:01:49,545
We're passing an argument to the function.

47
00:01:49,545 --> 00:01:52,042
And the argument that we are passing to the function —

48
00:01:52,042 --> 00:01:55,733
to the input function right over here — is a string.

49
00:01:55,733 --> 00:01:58,025
And "string" sounds like a very complicated thing,

50
00:01:58,025 --> 00:02:00,020
but it really is just a string of characters.

51
00:02:00,020 --> 00:02:01,800
You can view it as a bunch of text.

52
00:02:01,800 --> 00:02:04,036
it'll present this text to the user,

53
00:02:04,036 --> 00:02:05,708
and it'll give them a little input box.

54
00:02:05,708 --> 00:02:07,733
And the user will put something into that input box.

55
00:02:07,733 --> 00:02:10,009
It'll evaluate what is in that input box.

56
00:02:10,009 --> 00:02:12,010
And then, you could either view it as

57
00:02:12,010 --> 00:02:14,692
having the variable number refer to it,

58
00:02:14,692 --> 00:02:16,666
or put it in the variable number,

59
00:02:16,666 --> 00:02:20,664
depending on how you want to visualize the variable.

60
00:02:20,664 --> 00:02:24,677
If you're using Python 3,

61
00:02:24,677 --> 00:02:26,684
you'll want to call "eval"

62
00:02:26,684 --> 00:02:29,022
on what's returned from this function.

63
00:02:29,022 --> 00:02:30,667
This is if you're doing Python 3.

64
00:02:30,667 --> 00:02:32,602
I'm running Python 2 right now.

65
00:02:32,602 --> 00:02:36,086
And if you want to do it exactly the way I'm doing it,

66
00:02:36,086 --> 00:02:39,015
I'm using the PyScripter IDE —

67
00:02:39,015 --> 00:02:41,003
Integrated Development Environment.

68
00:02:41,003 --> 00:02:43,929
It's a free open-source project on a PC.

69
00:02:43,929 --> 00:02:46,369
But there're many, many ways that you can edit Python.

70
00:02:46,369 --> 00:02:49,672
You can really just do it on any text editor — so anyway.

71
00:02:49,672 --> 00:02:53,669
So, so far, all we've done is we've taken input from the user

72
00:02:53,669 --> 00:02:56,025
and we're putting it in the variable number.

73
00:02:56,025 --> 00:02:57,338
What's really cool about Python is

74
00:02:57,338 --> 00:02:59,343
we can just run this program as is

75
00:02:59,343 --> 00:03:00,377
and just see what happens.

76
00:03:00,377 --> 00:03:01,626
So let's do that.

77
00:03:01,626 --> 00:03:04,159
Save it, and I'm going to run it.

78
00:03:04,159 --> 00:03:06,826
This little play button runs it in this IDE.

79
00:03:06,826 --> 00:03:09,648
And just like we said, it prompts the user:

80
00:03:09,648 --> 00:03:12,067
"Enter a non-negative integer to take the factorial of:".

81
00:03:12,067 --> 00:03:14,190
So I don't know — let me type in 10.

82
00:03:14,190 --> 00:03:17,388
And I [click] OK. Nothing happened.

83
00:03:17,388 --> 00:03:18,510
Well of course nothing happened!

84
00:03:18,510 --> 00:03:20,832
Because I didn't really tell this to do anything.

85
00:03:20,832 --> 00:03:23,523
But if we type in "number",

86
00:03:23,523 --> 00:03:26,013
we'll see that it is now assigned to 10.

87
00:03:26,013 --> 00:03:28,395
The variable is now referring to the number 10

88
00:03:28,395 --> 00:03:32,988
So now we can use this number and take the factorial of it.

89
00:03:32,988 --> 00:03:34,013
So what I'm going to do —

90
00:03:34,013 --> 00:03:36,006
and we're going to do it iteratively —

91
00:03:36,006 --> 00:03:37,029
we're going to talk more about

92
00:03:37,029 --> 00:03:38,987
what that means in the future.

93
00:03:38,987 --> 00:03:41,867
So I'm going to define another variable called product.

94
00:03:41,867 --> 00:03:44,073
I'm start product at 1.

95
00:03:44,073 --> 00:03:45,534
What we're going to do is

96
00:03:45,534 --> 00:03:49,839
we're going to start from 1 up to whatever number this is,

97
00:03:49,839 --> 00:03:51,710
and keep multiplying the product

98
00:03:51,710 --> 00:03:54,701
by each successively larger number.

99
00:03:54,701 --> 00:03:56,215
So we're going to start —

100
00:03:56,215 --> 00:03:59,148
So I'm going to set up a for loop here —

101
00:03:59,148 --> 00:04:01,867
In next video I'm going to really step through

102
00:04:01,867 --> 00:04:04,010
exactly what a for loop does.

103
00:04:04,010 --> 00:04:05,215
We're going to — within the for loop —

104
00:04:05,215 --> 00:04:07,526
we're going to define a variable i.

105
00:04:07,526 --> 00:04:10,467
This is kind of the classic variable to define in for loops.

106
00:04:10,467 --> 00:04:11,856
And that variable is going to

107
00:04:11,856 --> 00:04:14,859
keep incrementing to larger and larger values

108
00:04:14,859 --> 00:04:16,014
as we go through it.

109
00:04:16,014 --> 00:04:19,169
So "for i in range" —

110
00:04:19,169 --> 00:04:21,682
And for loops in Python are a little bit different than

111
00:04:21,682 --> 00:04:23,334
if you were doing it in Javascript or Java.

112
00:04:23,334 --> 00:04:25,487
I'll do a future video where we do that.

113
00:04:25,487 --> 00:04:27,800
But "range of number" —

114
00:04:27,800 --> 00:04:30,420
And just to understand what range of number does is,

115
00:04:30,420 --> 00:04:34,000
it provides a list of numbers starting with 0,

116
00:04:34,000 --> 00:04:36,200
up to 1 less than that number.

117
00:04:36,200 --> 00:04:38,394
So over here we already defined what number is,

118
00:04:38,394 --> 00:04:39,385
number is 10.

119
00:04:39,385 --> 00:04:43,208
So if I type in range of 10 — or let me do range of number.

120
00:04:43,208 --> 00:04:46,674
It gives me a list starting with 0 all the way to 9 —

121
00:04:46,674 --> 00:04:48,467
all the way to 1 less than than 10

122
00:04:48,467 --> 00:04:51,271
So that the same thing as range of 10.

123
00:04:51,271 --> 00:04:53,348
And what this for loop does is

124
00:04:53,348 --> 00:04:57,009
it assigns this i to each term of the sequence —

125
00:04:57,009 --> 00:04:59,392
So it starts with [0] — or each term of this list.

126
00:04:59,392 --> 00:05:01,845
It starts with [0], and then it'll [do]

127
00:05:01,845 --> 00:05:05,005
whatever you tell it to do in the for loop with i is equal to [0],

128
00:05:05,005 --> 00:05:07,665
then it'll assign i to to be 1.

129
00:05:07,665 --> 00:05:11,226
Sorry. It'll start with i equals 0, then it'll go to i equals 1,

130
00:05:11,226 --> 00:05:14,482
then i equals 2 then i equals 3 — so on and so forth —

131
00:05:14,482 --> 00:05:18,810
all the way until you have gone all the way through the list.

132
00:05:18,810 --> 00:05:24,839
And so what we can do here is —

133
00:05:24,839 --> 00:05:27,699
within the for loop —

134
00:05:27,699 --> 00:05:29,985
we can redefine product

135
00:05:29,985 --> 00:05:33,863
to be equal to the product (the former product) —

136
00:05:33,863 --> 00:05:39,194
So our new product is going to be our old product times —

137
00:05:39,194 --> 00:05:44,054
and I'm going to multiply it — times i + 1.

138
00:05:44,054 --> 00:05:46,400
We're going to step through it carefully in the next video.

139
00:05:46,400 --> 00:05:48,485
But I want you to think about what it's doing already.

140
00:05:48,485 --> 00:05:49,678
So right when we start,

141
00:05:49,678 --> 00:05:53,988
let's say that number ends up being 3.

142
00:05:53,988 --> 00:05:55,529
So product gets set to 1.

143
00:05:55,529 --> 00:05:57,634
And we say "for i in range".

144
00:05:57,634 --> 00:06:02,185
And then, if we do range of 3,

145
00:06:02,185 --> 00:06:04,538
then i is first going to be 0.

146
00:06:04,538 --> 00:06:05,691
And so we're going to take...

147
00:06:05,691 --> 00:06:08,987
our old product — so 1 — times i + 1.

148
00:06:08,987 --> 00:06:12,067
Well i is going to be 0 so 0 + 1 is 1.

149
00:06:12,067 --> 00:06:14,715
So it is going to be 1 × 1, [which] is going to be 1.

150
00:06:14,715 --> 00:06:17,789
Then we're going to assign i to be 1.

151
00:06:17,789 --> 00:06:19,368
This is what the for loop does.

152
00:06:19,368 --> 00:06:21,389
It iterates. It keeps incrementing.

153
00:06:21,389 --> 00:06:22,830
Well it doesn't always have to increment.

154
00:06:22,830 --> 00:06:24,697
It keeps changing the value of i

155
00:06:24,697 --> 00:06:26,974
as it goes through this list.

156
00:06:26,974 --> 00:06:29,190
And so the next time around our product is 1.

157
00:06:29,190 --> 00:06:34,577
But now i is 1, so 1 + 1 is 2, times 1 is now going to be 2.

158
00:06:34,577 --> 00:06:37,084
And then it'll go — it'll set i to be 2.

159
00:06:37,084 --> 00:06:38,687
So it's going to be 2 + 1...

160
00:06:38,687 --> 00:06:42,523
times what product was from the last iteration which was 2.

161
00:06:42,523 --> 00:06:46,359
And so it's going to be 2 × 3 which is 6

162
00:06:46,359 --> 00:06:49,386
And so when we're finally done with this for loop,

163
00:06:49,386 --> 00:06:51,190
inside of product —

164
00:06:51,190 --> 00:06:54,390
or I guess we can say product will be referring to —

165
00:06:54,390 --> 00:06:57,467
the actual factorial of the number inputted.

166
00:06:57,467 --> 00:07:00,733
So then we can say "print product".

167
00:07:00,733 --> 00:07:03,856
And in Python — in this case right here —

168
00:07:03,856 --> 00:07:07,379
the interpreter knows to break out of this for loop

169
00:07:07,379 --> 00:07:10,053
once it runs out of numbers to assign i to.

170
00:07:10,053 --> 00:07:12,342
So, that's why it doesn't run forever.

171
00:07:12,342 --> 00:07:17,325
So, let's see if what we did here actually works.

172
00:07:17,325 --> 00:07:19,322
Let's see if it actually works.

173
00:07:19,322 --> 00:07:22,696
So let me — actually — write like this.

174
00:07:22,696 --> 00:07:25,551
So let's see if this things actually works.

175
00:07:25,551 --> 00:07:29,667
So I'll save it. And then let me run it.

176
00:07:29,667 --> 00:07:31,164
And so it's asking me,

177
00:07:31,164 --> 00:07:33,378
"Enter a non-negative integer to take the factorial of:".

178
00:07:33,378 --> 00:07:35,622
So let's try it with 3 — Enter.

179
00:07:35,622 --> 00:07:37,200
It gave me the right answer.

180
00:07:37,200 --> 00:07:40,266
Let's try it again.

181
00:07:40,266 --> 00:07:44,230
So, "Enter a non-negative integer to take the factorial of:".

182
00:07:44,230 --> 00:07:47,067
I don't know, let's try something large: 10.

183
00:07:47,067 --> 00:07:50,668
It worked. [I] assume that you can verify this for yourself.

184
00:07:50,668 --> 00:07:52,513
So what we have done here is write a very simple program.

185
00:07:52,513 --> 00:07:53,641
But, it already does something neat —

186
00:07:53,641 --> 00:07:55,964
it takes a factorial of an arbitrary number.

187
00:07:55,964 --> 00:07:56,979
In next video,

188
00:07:56,979 --> 00:07:59,222
we're going to step through it much more carefully,

189
00:07:59,222 --> 00:08:02,650
in case this kind of confused you — what this for loop did.

190
00:08:02,650 --> 00:08:05,364
So, just hold with me for the next video, and watch that.

191
00:08:05,364 --> 00:08:09,123
That has a little bit of a more careful explanation.
