1
00:00:00,000 --> 00:00:02,221
What I want you to attempt to do is

2
00:00:02,221 --> 00:00:03,704
given an arbitrary list—

3
00:00:03,704 --> 00:00:06,668
I made a particular example of an arbitrary list right here—

4
00:00:06,668 --> 00:00:09,662
write a function that sorts that arbitrary list.

5
00:00:09,662 --> 00:00:12,205
So maybe you call your function my_sort()

6
00:00:12,205 --> 00:00:13,682
You can call it whatever.

7
00:00:13,682 --> 00:00:14,661
What I want is,

8
00:00:14,661 --> 00:00:18,933
after I call my_sort() on a list,

9
00:00:18,933 --> 00:00:21,364
that the list itself gets resorted.

10
00:00:21,364 --> 00:00:25,004
So I don't want my_sort() to return a copy of the list.

11
00:00:25,004 --> 00:00:27,507
I want, after I call my_sort() on "a",

12
00:00:27,507 --> 00:00:29,671
if I then refer to "a"—

13
00:00:29,671 --> 00:00:31,256
let's say I do print(a),

14
00:00:31,256 --> 00:00:32,840
if I do print(a)—

15
00:00:32,840 --> 00:00:36,000
then that will literally return a sorted version of "a".

16
00:00:36,000 --> 00:00:38,000
Or I should say, it will return "a"

17
00:00:38,000 --> 00:00:40,528
but now "a" itself is sorted,

18
00:00:40,528 --> 00:00:43,241
the list that "a" is referring to is now sorted.

19
00:00:43,241 --> 00:00:45,520
So it would now look like this,

20
00:00:45,520 --> 00:00:51,399
"a" would now look like [1, 2, 3, 5, 7, 8].

21
00:00:51,399 --> 00:00:52,389
And you might say,

22
00:00:52,389 --> 00:00:53,687
wait Sal, that's very easy.

23
00:00:53,687 --> 00:00:55,687
There is already a sort function in Python.

24
00:00:55,687 --> 00:00:59,951
You literally can call a.sort()

25
00:00:59,951 --> 00:01:02,083
and that will sort "a" in place

26
00:01:02,083 --> 00:01:04,215
just the way I've asked you to do.

27
00:01:04,215 --> 00:01:05,677
And when I say in place I'm saying

28
00:01:05,677 --> 00:01:08,493
it's actually going to work on the actual list.

29
00:01:08,493 --> 00:01:10,671
It's not going to create a copy of the list that is sorted.

30
00:01:10,671 --> 00:01:14,016
It's actually going to work in place on that actual list.

31
00:01:14,016 --> 00:01:17,364
And a.sort() does this but I don't want you to use that.

32
00:01:17,364 --> 00:01:18,821
So let's cross this off.

33
00:01:18,821 --> 00:01:21,657
The whole point of this is to learn, you know,

34
00:01:21,657 --> 00:01:24,693
just kind of try our best to write our own sorting function.

35
00:01:24,693 --> 00:01:26,383
And what you're going to see,

36
00:01:26,383 --> 00:01:27,228
and hopefully you appreciate

37
00:01:27,228 --> 00:01:28,858
as we go deeper and deeper into this,

38
00:01:28,858 --> 00:01:32,400
there's ['re] many many many many ways to sort things.

39
00:01:32,400 --> 00:01:33,836
And sorting is really a good way

40
00:01:33,836 --> 00:01:38,610
to think about how good a function—

41
00:01:38,610 --> 00:01:40,677
and we'll start talking about algorithms—

42
00:01:40,677 --> 00:01:43,831
how good a process is or how fast a process is,

43
00:01:43,831 --> 00:01:46,861
or how efficient a process is at doing something.

44
00:01:46,861 --> 00:01:48,832
So I'll leave you there.

45
00:01:48,832 --> 00:01:50,003
Try to sort this.

46
00:01:50,003 --> 00:01:50,974
In the next video,

47
00:01:50,974 --> 00:01:52,976
I'll try to outline an algorithm,

48
00:01:52,976 --> 00:01:55,933
which is really a process for doing something.

49
00:01:55,933 --> 00:01:57,687
I'll outline an algorithm,

50
00:01:57,687 --> 00:01:59,533
that's kind of an intuitive way to sort things.

51
00:01:59,533 --> 00:02:01,800
It's not the most efficient way to sort things.

52
00:02:01,800 --> 00:02:04,669
And then after that I'll my best to hand it—

53
00:02:04,669 --> 00:02:05,523
I'll try my best—

54
00:02:05,523 --> 00:02:11,999
try at actually writing that algorithm in a python program.
