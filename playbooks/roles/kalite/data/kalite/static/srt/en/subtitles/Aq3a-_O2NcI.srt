1
00:00:00,000 --> 00:00:05,000
A digital signature is basically the mathematical mechanism

2
00:00:05,000 --> 00:00:07,950
for essentially combining a public

3
00:00:07,950 --> 00:00:11,310
sequence of numbers with a given digital message.

4
00:00:11,310 --> 00:00:16,170
You can really, think of a digital signature in many ways, as the electronic

5
00:00:16,170 --> 00:00:18,450
analog of a physical signature

6
00:00:18,800 --> 00:00:24,760
So in physical signature, you typically affix let's say a sequence of characters, representing your name / identity

7
00:00:24,760 --> 00:00:25,920
to a document.

8
00:00:25,920 --> 00:00:30,240
And this process effectively binds your identity to that document

9
00:00:30,240 --> 00:00:32,950
And more so, by formulating

10
00:00:32,950 --> 00:00:35,300
the characters in your name, &amp; maybe some

11
00:00:35,300 --> 00:00:38,990
particularly unique / peculiar way that's unique to you

12
00:00:38,990 --> 00:00:42,890
the hope is that nobody will be able to forge your name on that document

13
00:00:43,320 --> 00:00:49,200
Now, in a digital signature scheme, it turns out you can achieve these kinds of properties mathematically

14
00:00:49,200 --> 00:00:53,460
Now, some of the more well known digital signature schemes include things like the

15
00:00:53,460 --> 00:00:58,190
the RSA digital signature scheme which stands for "Rivest, Shamir, Adleman" scheme

16
00:00:58,190 --> 00:01:03,410
there's also a scheme known as DSS which is the Digital Signature Standard, actually

17
00:01:03,410 --> 00:01:06,060
and actually, if you were to use a scheme like

18
00:01:06,060 --> 00:01:10,130
RSA / DSS, in my mind, it's actually a lot harder to forge

19
00:01:10,130 --> 00:01:13,730
these digital signatures than it is to forge a hand-written signature

20
00:01:14,400 --> 00:01:17,720
So in this particular video, I'll try to describe the overall

21
00:01:17,720 --> 00:01:21,710
higher level mechanics, if you will, of a digital signature scheme

22
00:01:21,710 --> 00:01:24,670
but I won't actually go into / describe the

23
00:01:24,670 --> 00:01:29,520
the underlying mathematical details of let's say, a specific scheme like RSA / DSS

24
00:01:29,520 --> 00:01:31,100
at least, not in this video

25
00:01:32,350 --> 00:01:37,340
So the way a digital signature scheme works, let's say you have a user, &amp; we're gonna call her Alice

26
00:01:37,340 --> 00:01:39,100
&amp; let's say Alice wants to

27
00:01:39,100 --> 00:01:41,100
digitally sign a document

28
00:01:41,350 --> 00:01:45,620
in the scheme, Alice is going to: first, generate

29
00:01:45,620 --> 00:01:47,380
2 keys, and

30
00:01:47,380 --> 00:01:49,700
these 2 keys are known as the

31
00:01:49,700 --> 00:01:51,210
as the signing key

32
00:01:52,420 --> 00:01:55,970
which is a private key. I'm gonna use red to denote it

33
00:01:55,970 --> 00:01:58,860
we'll abbreviate the signing key as SK

34
00:01:58,860 --> 00:02:03,770
and then, Alice is also going to generate a separate key, known as a "verification key"

35
00:02:03,770 --> 00:02:09,100
now, the actual process of coming up with this signing key &amp; verification key can happen concurrently

36
00:02:09,100 --> 00:02:13,680
Alice will generate these 2 keys at the same time, &amp; they're gonna have a mathematical relationship

37
00:02:13,680 --> 00:02:17,800
But the interesting thing is that you want it to be the case that the

38
00:02:17,800 --> 00:02:21,300
verification key is public &amp; the signing key will be private

39
00:02:21,300 --> 00:02:23,040
but more so

40
00:02:23,040 --> 00:02:27,710
in a digital signature scheme, it should be hard to come up with the verification key

41
00:02:27,710 --> 00:02:31,070
or rather, it should be hard to come up with the signing key, rather

42
00:02:31,070 --> 00:02:33,070
if you only see the verification key

43
00:02:35,420 --> 00:02:39,070
Now, let's consider what a digital signature on a message will entail.

44
00:02:39,070 --> 00:02:41,070
So basically, if you have a message and

45
00:02:41,070 --> 00:02:42,920
let's call this message M

46
00:02:42,920 --> 00:02:45,690
&amp; you wish to digitally sign that message

47
00:02:45,690 --> 00:02:48,010
what you're gonna basically do is apply a

48
00:02:48,010 --> 00:02:52,800
mathematical transformation. Alice is gonna apply a mathematical transformation

49
00:02:52,800 --> 00:02:54,410
to the message M

50
00:02:54,410 --> 00:02:56,860
and her signing key as K

51
00:02:56,860 --> 00:02:59,910
And the result of that transformation

52
00:02:59,910 --> 00:03:02,780
the output of that transformation will be a special

53
00:03:04,020 --> 00:03:06,690
sequence of numbers that we call the signature

54
00:03:06,690 --> 00:03:10,510
The signature on the message M

55
00:03:10,510 --> 00:03:14,220
Now, the interesting here is that the signature basically is

56
00:03:14,220 --> 00:03:17,960
one that is derived from a combination of

57
00:03:17,960 --> 00:03:22,280
the message M together with the signing key,

58
00:03:22,280 --> 00:03:25,310
the private signing key of Alice, and it's going to effectively

59
00:03:25,310 --> 00:03:30,720
produce a short / relatively short sequence of numbers as an output

60
00:03:31,720 --> 00:03:32,720
and

61
00:03:32,720 --> 00:03:37,990
in particular, digital signature schemes should be / typically are designed so that

62
00:03:37,990 --> 00:03:40,330
only the person who possesses

63
00:03:40,330 --> 00:03:43,000
this signing key, that private signing key

64
00:03:43,000 --> 00:03:45,000
is capable of generating

65
00:03:45,000 --> 00:03:47,670
this type of output, this type of signature

66
00:03:47,670 --> 00:03:49,670
SM on the message M

67
00:03:51,440 --> 00:03:56,720
Now, the verification is kind of analogous to the signing process

68
00:03:56,720 --> 00:04:00,300
but it involves the public verification key. So in the verification process,

69
00:04:00,300 --> 00:04:04,970
you actually have 3 different inputs. So the first input will be the message that you want to

70
00:04:04,970 --> 00:04:06,800
to verify the signature of

71
00:04:06,800 --> 00:04:10,600
you also need an additional message, you need to get, as input, the

72
00:04:10,600 --> 00:04:13,550
the signature on that message. What does the SM look like

73
00:04:13,740 --> 00:04:15,020
and then finally,

74
00:04:15,020 --> 00:04:18,350
the input, the final input to the

75
00:04:19,150 --> 00:04:23,440
verification scheme will be the public key, the public verification key

76
00:04:23,440 --> 00:04:25,140
that belongs to Alice

77
00:04:25,990 --> 00:04:31,060
and these 3 inputs are put in, &amp; there's a mathematical transformation applied to these inputs

78
00:04:31,060 --> 00:04:34,200
&amp; basically what that mathematical transformation is trying to

79
00:04:34,200 --> 00:04:35,920
to ascertain / check

80
00:04:35,920 --> 00:04:37,730
is that, the

81
00:04:37,730 --> 00:04:41,080
the signature that you see corresponds with the message M

82
00:04:41,080 --> 00:04:45,280
is one that would've been produced by Alice's private signing key

83
00:04:45,780 --> 00:04:50,560
&amp; this private signing key, in turn, corresponds to Alice's public verification key

84
00:04:50,560 --> 00:04:52,970
Now, what I think is really remarkable, is that

85
00:04:52,970 --> 00:04:54,430
you can actually

86
00:04:54,430 --> 00:04:56,280
carry out this process

87
00:04:56,280 --> 00:04:59,970
with just the verification key. You don't actually need

88
00:04:59,970 --> 00:05:03,270
the signing key to validate digital signature. You don't even

89
00:05:03,270 --> 00:05:05,430
need it inadvertently / indirectly

90
00:05:05,430 --> 00:05:10,480
You can do everything, you can verify everything with knowledge of only

91
00:05:10,480 --> 00:05:14,490
the public verification. And the public verification procedure basically outputs kind of a

92
00:05:14,490 --> 00:05:16,640
a yes or no. It tells should I

93
00:05:16,640 --> 00:05:19,310
should I accept the signature or should I reject it?

94
00:05:20,060 --> 00:05:22,370
It's a basic validation procedure

95
00:05:22,370 --> 00:05:27,830
And so as you can see, the process of signing effectively will bind

96
00:05:27,830 --> 00:05:31,530
this public verification key, it binds the public verification key

97
00:05:31,530 --> 00:05:35,260
to Alice. Recall that Alice is the one who published

98
00:05:35,260 --> 00:05:40,100
this verification key &amp; told the whole world: "Hey, this is my verification key &amp; the system

99
00:05:40,100 --> 00:05:45,270
and only I will be able to sign messages that will be considered valid

100
00:05:45,270 --> 00:05:48,480
with respect to that verification key"

101
00:05:49,390 --> 00:05:54,440
And because the message is now being essentially bound to this public key,

102
00:05:54,440 --> 00:05:56,630
and if you think of the public key as

103
00:05:56,630 --> 00:05:59,700
an identifier of sorts, maybe an identifier for Alice

104
00:05:59,700 --> 00:06:01,950
then you can think of digital signing

105
00:06:01,950 --> 00:06:05,200
as a process that basically binds an identity

106
00:06:05,200 --> 00:06:08,000
to an underlying message. And that really gives us

107
00:06:08,000 --> 00:06:10,830
in the mathematical sense, it gives us the analog

108
00:06:10,830 --> 00:06:13,060
of a traditional hand-written signature

109
00:06:14,040 --> 00:06:20,720
Now, I wanna make 2 remarks, &amp; I think they're particularly relevant. First of all, you'll notice that the transformation that produces

110
00:06:20,720 --> 00:06:24,300
the actual digital signature itself

111
00:06:24,300 --> 00:06:27,530
this transformation right here that produces Sm

112
00:06:27,530 --> 00:06:31,140
this transformation basically takes the message

113
00:06:31,140 --> 00:06:33,612
it takes the message as one of its inputs

114
00:06:34,375 --> 00:06:36,861
and what that means is that the

115
00:06:37,304 --> 00:06:42,658
signature depends on the message. If you change the message, you'll get a different signature

116
00:06:42,650 --> 00:06:48,006
Now, in this sense, a digital signature is actually different from a traditional hand-written signature

117
00:06:48,000 --> 00:06:51,464
Your hand-written signature probably doesn't change, more or less

118
00:06:51,460 --> 00:06:54,307
stays the same, regardless of what you're signing

119
00:06:54,300 --> 00:06:59,292
But your digital signature is very sensitive to what you're signing. It will vary depending on what you're signing

120
00:06:59,290 --> 00:07:02,473
If you sign a different message, you'll get a different signature as an output

121
00:07:03,532 --> 00:07:05,495
The second remark I wanna make is that:

122
00:07:05,490 --> 00:07:08,935
digital signatures are often associated with

123
00:07:08,930 --> 00:07:13,470
cryptographic hash function. I told you in my video on cryptographic hash function and in fact,

124
00:07:13,470 --> 00:07:16,590
I mentioned in that video and I'll reiterate here that the first

125
00:07:16,590 --> 00:07:19,489
cryptographic hash functions were actually designed

126
00:07:19,480 --> 00:07:24,443
specifically with digital signature in mind as their killer application, if you will

127
00:07:24,440 --> 00:07:30,713
So in particular, what typically happens before you actually sign an arbitrary message, let's say you have a huge message

128
00:07:30,710 --> 00:07:34,061
that you wanna sign. Before you sign this message,

129
00:07:34,060 --> 00:07:36,960
you're going to basically apply

130
00:07:36,960 --> 00:07:40,449
a cryptographich function to that message, and you're gonna get

131
00:07:40,440 --> 00:07:47,193
an output from that function (the cryptographic hash function). You'll get a shorter output, the digest of that cryptographic hash function

132
00:07:47,190 --> 00:07:51,544
and what you'll do in a signing algorithm, is that rather than signing the original message

133
00:07:51,540 --> 00:07:53,778
you will first hash it &amp; then sign the

134
00:07:53,770 --> 00:07:56,609
the hash of the message. You'll sign the resulting digest

135
00:07:56,600 --> 00:07:59,027
instead of the original message

136
00:08:00,270 --> 00:08:03,347
and this 2 step paradigm of

137
00:08:03,340 --> 00:08:05,427
doing hashing &amp; then signing

138
00:08:05,420 --> 00:08:08,966
?? simplifies the process of digital signing since you

139
00:08:08,960 --> 00:08:12,640
effectively are no longer dealing with an arbitrary length input, but

140
00:08:12,640 --> 00:08:15,827
instead you're working with a fixed length quantity

141
00:08:15,820 --> 00:08:19,113
and this hash and then sign pardigm is actually safe

142
00:08:19,110 --> 00:08:21,501
as long as it's hard to find

143
00:08:21,500 --> 00:08:24,320
2 messages that map to the same output

144
00:08:24,320 --> 00:08:27,723
under the application of the hash function. In other words, you can't come up with

145
00:08:27,720 --> 00:08:30,689
with 2 messages that are different

146
00:08:30,680 --> 00:08:35,938
but whose output, when the hash function is applied to them, are identical. In other words,

147
00:08:35,930 --> 00:08:39,218
the hash function, as long as it is collision resistant,

148
00:08:39,210 --> 00:08:44,166
will result in a secure signature scheme with the hash and then sign paradigm

149
00:08:44,160 --> 00:08:49,089
Now, you can probably think about ???. But if you could find, lets say 2 input messages

150
00:08:49,080 --> 00:08:52,172
that are distinct, but map to the same output

151
00:08:52,170 --> 00:08:54,615
under an application of the hash function

152
00:08:54,610 --> 00:08:58,270
that would in fact lead to some bizzare problems, because

153
00:08:58,270 --> 00:09:00,406
a signature on the first message

154
00:09:00,400 --> 00:09:02,923
would then be identical to the signature on the second message.

155
00:09:02,920 --> 00:09:07,353
Since in both cases, you're not signing the actual message, you're signing the hash of the messages.

156
00:09:07,350 --> 00:09:12,553
So the hashes are identical, you'll end up with an identical signature on 2 different messages

157
00:09:12,550 --> 00:09:17,569
and that could create problems like: making it easy for maybe a particular message to be forged

158
00:09:17,560 --> 00:09:21,840
under this digital signature approach. And that's obviously something that you don't want

159
00:09:21,840 --> 00:09:26,486
You don't want someone to be able to come up with a signature on a different message

160
00:09:26,480 --> 00:09:30,049
as opposed to maybe the one that you initially intended to sign

161
00:09:31,009 --> 00:09:32,732
Now, it is possible

162
00:09:33,218 --> 00:09:36,449
and I just gonna make this clear, it's possible to describe

163
00:09:36,440 --> 00:09:39,606
digital signatures with a lot more mathematical formalism

164
00:09:39,600 --> 00:09:42,018
but my hope with this video, really, was to give you

165
00:09:42,018 --> 00:09:44,010
a flavor if you will, without drilling into all of the underlying nuances &amp; mathematics
