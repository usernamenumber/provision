1
00:00:01,520 --> 00:00:07,200
First, let's build up the conceptual mechanics
for these new types of random algorithms

2
00:00:07,320 --> 00:00:10,040
which accept some input 'n'

3
00:00:10,100 --> 00:00:12,240
and if 'n' is prime

4
00:00:12,400 --> 00:00:16,320
our algorithm will ouput
'prime' with 100% certainty

5
00:00:16,320 --> 00:00:20,580
and it will never label it as composite.

6
00:00:20,980 --> 00:00:26,200
Or if 'n' is composite, there will be
some tiny chance of error 'e'

7
00:00:26,200 --> 00:00:28,320
that we'll label it prime.

8
00:00:28,320 --> 00:00:32,820
Otherwise, there is a 1 minus
this tiny error probability

9
00:00:32,820 --> 00:00:36,400
that correctly identify it as composite.

10
00:00:36,580 --> 00:00:41,280
So we'll start simple. Out of some
universe of integers up to some limit.

11
00:00:41,360 --> 00:00:45,720
We grab a number
and call this integer 'n'.

12
00:00:45,720 --> 00:00:48,000
And we input 'n' into our machine.

13
00:00:48,000 --> 00:00:51,080
And previously with
our trial division methods,

14
00:00:51,080 --> 00:00:57,080
We basically iterated through
all values from 1 to the square root of 'n'

15
00:00:57,080 --> 00:01:00,700
and tested if that number divides 'n'.

16
00:01:00,700 --> 00:01:05,000
And ideally we only wanted
to check primes to save time.

17
00:01:05,000 --> 00:01:09,420
And if yes 'a' divides 'n',
then we know that 'n' is a composite number,

18
00:01:09,480 --> 00:01:11,860
because we found a composite witness.

19
00:01:11,980 --> 00:01:14,800
If not then we're not sure,

20
00:01:14,800 --> 00:01:19,420
so we go back
and we increment 'a' and we test again.

21
00:01:19,420 --> 00:01:22,880
And once we exhausted all posible tests,

22
00:01:22,880 --> 00:01:27,940
we can then say yes 'n' is prime,
if we found no divisors.

23
00:01:27,940 --> 00:01:30,340
But now let's be lazy.

24
00:01:31,200 --> 00:01:34,400
What if we just pick a few random ntegers

25
00:01:34,440 --> 00:01:39,900
and do a few divisibility tests,
which you can think of as random questions.

26
00:01:39,900 --> 00:01:43,180
Since we know that some number 'n',

27
00:01:43,180 --> 00:01:47,820
if it's composite, it must have
some divisors scattered around.

28
00:01:47,820 --> 00:01:50,760
and at minimum it has a single divisor.

29
00:01:50,840 --> 00:01:53,540
And some composite numbers
have many divisors.

30
00:01:53,560 --> 00:01:56,520
So anyway, we pick a random integer 'a'

31
00:01:56,520 --> 00:01:59,760
between 1 and square
root of 'n' and that's it.

32
00:01:59,760 --> 00:02:03,780
Then we just check if 'a' divides 'n'.

33
00:02:03,780 --> 00:02:06,220
And as before, if 'a' divides 'n',

34
00:02:06,280 --> 00:02:09,960
then we know for sure that 'n'
is composite, we found a wittness.

35
00:02:10,000 --> 00:02:15,120
If not, then we haven't learned
too much except that 'n' could be prime.

36
00:02:15,120 --> 00:02:22,440
So to be save, we can generate
a few more random 'a's and keep testing.

37
00:02:22,480 --> 00:02:26,000
And perhaps after 100 or 1000 interations,

38
00:02:26,000 --> 00:02:30,400
we can stop and say it's
probably prime with some certainty

39
00:02:30,400 --> 00:02:32,780
say for example 99.9%.

40
00:02:33,620 --> 00:02:38,100
And this is similar to the example
game on conditional probability.

41
00:02:38,100 --> 00:02:42,340
In a simplest version, we were trying
to guess if a coin was fair,

42
00:02:42,340 --> 00:02:44,920
or if it was a two-headed coin.

43
00:02:45,040 --> 00:02:48,600
In this case, tails is like
finding a divisor.

44
00:02:48,600 --> 00:02:50,960
It's a witness of a fair coin.

45
00:02:50,960 --> 00:02:55,600
Heads is the case where we might want
the person to flip again and iterate.

46
00:02:55,600 --> 00:03:00,120
In this case, after around 5 heads,
we are more than 90% sure,

47
00:03:00,160 --> 00:03:04,240
so we could stop and say
that we think the coin is two-headed.

48
00:03:06,500 --> 00:03:11,380
So here's a program I set up which compares
our old trial division methods

49
00:03:11,440 --> 00:03:14,200
with this new random division test.

50
00:03:14,560 --> 00:03:18,560
And I'm specifically using
the current trial division speed leader,

51
00:03:18,620 --> 00:03:23,860
which is the program by Dino and I posted
the link in the header of the program.

52
00:03:25,360 --> 00:03:28,280
So to begin, notice
the variable number of trials.

53
00:03:28,320 --> 00:03:33,620
This is the number of random guesses,
so we'll start at something small such as 3.

54
00:03:33,620 --> 00:03:36,520
And notice even with small input

55
00:03:36,520 --> 00:03:42,500
If the input is prime, the random division
algorithm will always output prime.

56
00:03:43,220 --> 00:03:48,280
But when the input is composite,
we see the random division can make mistakes

57
00:03:48,280 --> 00:03:51,440
and identify incorrectly as prime.

58
00:03:51,780 --> 00:03:55,380
However, we can fix thi
by increasing the number of trials

59
00:03:55,380 --> 00:03:58,100
and then the probability
of an error goes down

60
00:03:58,100 --> 00:04:02,280
and we see now that
the outputs more or less match.

61
00:04:07,080 --> 00:04:10,760
And as I test larger inputs,
the error grows again

62
00:04:10,760 --> 00:04:15,100
so I need to increase the number
of random tests accordingly.

63
00:04:15,420 --> 00:04:20,779
And when I do, the outputs 
match very nicely. They seem identical.

64
00:04:24,160 --> 00:04:29,700
But with huge input size, I need
thousands of tests for this to be accurate.

65
00:04:29,800 --> 00:04:33,380
So we haven't actually improved
the number of steps needed.

66
00:04:33,400 --> 00:04:36,540
Our trial division method
still seems better.

67
00:04:36,780 --> 00:04:42,000
This is because the error rate
of the division test is so high.

68
00:04:42,160 --> 00:04:45,180
We are close,
we have the right idea.

69
00:04:45,500 --> 00:04:48,500
So we need to use another test.

70
00:04:48,680 --> 00:04:51,340
We need an equation
which is fast to calculate

71
00:04:51,340 --> 00:04:54,800
that can be used to prove
whether a number is composite.

72
00:04:54,920 --> 00:04:58,840
And it must accept
not only the input integer 'n',

73
00:04:58,840 --> 00:05:01,300
but also random integer 'a'

74
00:05:01,460 --> 00:05:04,460
and do a random test
in the same sort of way.
